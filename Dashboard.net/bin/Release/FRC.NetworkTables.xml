<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>FRC.NetworkTables</name>
  </assembly>
  <members>
    <member name="T:NetworkTables.ConnectionInfo">
      <summary>
            This class contains all info needed for a given connection.
            </summary>
    </member>
    <member name="P:NetworkTables.ConnectionInfo.LastUpdate">
      <summary>Gets the last update time of the Connection.</summary>
    </member>
    <member name="P:NetworkTables.ConnectionInfo.ProtocolVersion">
      <summary>Gets the Protocol Version of the Connection.</summary>
    </member>
    <member name="P:NetworkTables.ConnectionInfo.RemoteId">
      <summary>Gets the Remote Id of the Connection.</summary>
    </member>
    <member name="P:NetworkTables.ConnectionInfo.RemoteIp">
      <summary>Gets the Remote IP Address of the Connection.</summary>
    </member>
    <member name="P:NetworkTables.ConnectionInfo.RemotePort">
      <summary>Gets the Remote Port of the Connection.</summary>
    </member>
    <member name="T:NetworkTables.ConnectionListenerCallback">
      <summary>
            This delegate is used when creating callbacks to be used for Connection Listeners
            </summary>
      <param name="uid">The uid of the callback</param>
      <param name="connected">True if this is an initial connection, false if the connection disconnected</param>
      <param name="conn">The information for the connection</param>
    </member>
    <member name="T:NetworkTables.EntryFlags">
      <summary>
            The flags avalible for Entries
            </summary>
    </member>
    <member name="F:NetworkTables.EntryFlags.None">
      <summary>
            No flags
            </summary>
    </member>
    <member name="F:NetworkTables.EntryFlags.Persistent">
      <summary>
            Set entry to be persistent
            </summary>
    </member>
    <member name="T:NetworkTables.EntryInfo">
      <summary>
            This class contains all info for a given entry.
            </summary>
    </member>
    <member name="P:NetworkTables.EntryInfo.Flags">
      <summary>Gets the Flags attached to the entry.</summary>
    </member>
    <member name="P:NetworkTables.EntryInfo.LastChange">
      <summary>Gets the last change time of the entry.</summary>
    </member>
    <member name="P:NetworkTables.EntryInfo.Name">
      <summary>Gets the Name of the entry.</summary>
    </member>
    <member name="P:NetworkTables.EntryInfo.Type">
      <summary>Gets the Type of the entry.</summary>
    </member>
    <member name="T:NetworkTables.EntryListenerCallback">
      <summary>
            This delegate is used when creating callbacks to be used for EntryListeners
            </summary>
      <param name="uid">The uid of the callback</param>
      <param name="name">The name of the entry being called back</param>
      <param name="value">The value of the entry being called back</param>
      <param name="flags">The flags of the entry bing called back</param>
    </member>
    <member name="T:NetworkTables.LogFunc">
      <summary>
            This delegate is use to specify the log function called back from the library
            </summary>
      <param name="level">The level of the current log</param>
      <param name="file">The file the log was called from</param>
      <param name="line">The line the log was called from</param>
      <param name="msg">The message of the log</param>
    </member>
    <member name="T:NetworkTables.LogLevel">
      <summary>
            The log level to use for the NT logger
            </summary>
    </member>
    <member name="T:NetworkTables.NetworkTable">
      <summary>
            This class is the Main Class for interfacing with NetworkTables.
            </summary>
    </member>
    <member name="M:NetworkTables.NetworkTable.AddConnectionListener(NetworkTables.Tables.IRemoteConnectionListener,System.Boolean)">
      <summary>
            Register an object to listen for connection and disconnection events.
            </summary>
      <param name="listener">The listener to be registered</param>
      <param name="immediateNotify">True if the listener object should be notified of the current
            connection state immediately.</param>
    </member>
    <member name="M:NetworkTables.NetworkTable.AddConnectionListener(System.Action{NetworkTables.Tables.IRemote,NetworkTables.ConnectionInfo,System.Boolean},System.Boolean)">
      <summary>
            Register a delegate to listen for connection and disconnection events.
            </summary>
      <param name="listener">The listener to be registered.</param>
      <param name="immediateNotify">True if the listener object should be notified of the current
            connection state immediately.</param>
    </member>
    <member name="M:NetworkTables.NetworkTable.AddGlobalConnectionListener(NetworkTables.Tables.IRemoteConnectionListener,System.Boolean)">
      <summary>
            Register an object to listen for connection and disconnection events.
            </summary>
      <param name="listener">The listener to be registered</param>
      <param name="immediateNotify">True if the listener object should be notified of the current
            connection state immediately.</param>
    </member>
    <member name="M:NetworkTables.NetworkTable.AddGlobalConnectionListener(System.Action{NetworkTables.Tables.IRemote,NetworkTables.ConnectionInfo,System.Boolean},System.Boolean)">
      <summary>
            Register a delegate to listen for connection and disconnection events.
            </summary>
      <param name="listener">The listener to be registered.</param>
      <param name="immediateNotify">True if the listener object should be notified of the current
            connection state immediately.</param>
    </member>
    <member name="M:NetworkTables.NetworkTable.AddSubTableListener(NetworkTables.Tables.ITableListener)">
      <summary>
            Adds a SubTable Listener with the default flags, and without local notify.
            </summary>
      <param name="listener">The <see cref="T:NetworkTables.Tables.ITableListener" /> to add.</param>
    </member>
    <member name="M:NetworkTables.NetworkTable.AddSubTableListener(NetworkTables.Tables.ITableListener,System.Boolean)">
      <summary>
            Adds a SubTable Listener.
            </summary>
      <param name="listener">The <see cref="T:NetworkTables.Tables.ITableListener" /> to add.</param>
      <param name="localNotify">True if we want to notify local and remote listeners,
            otherwise just notify remote listeners.</param>
    </member>
    <member name="M:NetworkTables.NetworkTable.AddSubTableListener(System.Action{NetworkTables.Tables.ITable,System.String,NetworkTables.Value,NetworkTables.NotifyFlags})">
      <summary>
            Adds a SubTable Listener with the default flags, and without local notify.
            </summary>
      <param name="listenerDelegate">The Table Listener Delegate to add.</param>
    </member>
    <member name="M:NetworkTables.NetworkTable.AddSubTableListener(System.Action{NetworkTables.Tables.ITable,System.String,NetworkTables.Value,NetworkTables.NotifyFlags},System.Boolean)">
      <summary>
            Adds a SubTable Listener.
            </summary>
      <param name="listenerDelegate">The Table Listener Delegate to add.</param>
      <param name="localNotify">True if we want to notify local and remote listeners,
            otherwise just notify remote listeners.</param>
    </member>
    <member name="M:NetworkTables.NetworkTable.AddTableListener(NetworkTables.Tables.ITableListener,System.Boolean)">
      <summary>
            Add a listener to changes to the table.
            </summary>
      <param name="listener">The listener to add</param>
      <param name="immediateNotify">If true then this listener will be notified of all current entries (marked as new)</param>
    </member>
    <member name="M:NetworkTables.NetworkTable.AddTableListener(System.Action{NetworkTables.Tables.ITable,System.String,NetworkTables.Value,NetworkTables.NotifyFlags},System.Boolean)">
      <summary>
            Add a listener to changes to the table.
            </summary>
      <param name="listenerDelegate">The Table Listener Delegate to add.</param>
      <param name="immediateNotify">If true then this listener will be notified of all current entries (marked as new)</param>
    </member>
    <member name="M:NetworkTables.NetworkTable.AddTableListener(System.String,NetworkTables.Tables.ITableListener,System.Boolean)">
      <summary>
            Add a listener for changes to a specific key in the table.
            </summary>
      <param name="key">The key to listen for</param>
      <param name="listener">The listener to add</param>
      <param name="immediateNotify">If true then this listener will be notified of all current entries (marked as new)</param>
    </member>
    <member name="M:NetworkTables.NetworkTable.AddTableListener(System.String,System.Action{NetworkTables.Tables.ITable,System.String,NetworkTables.Value,NetworkTables.NotifyFlags},System.Boolean)">
      <summary>
            Add a listener for changes to a specific key in the table.
            </summary>
      <param name="key">The key to listen for</param>
      <param name="listenerDelegate">The Table Listener Delegate to add.</param>
      <param name="immediateNotify">If true then this listener will be notified of all current entries (marked as new)</param>
    </member>
    <member name="M:NetworkTables.NetworkTable.AddTableListenerEx(NetworkTables.Tables.ITableListener,NetworkTables.NotifyFlags)">
      <summary>
            Add a listener to changes to the table.
            </summary>
      <param name="listener">The listener to add</param>
      <param name="flags">The <see cref="T:NetworkTables.EntryFlags" /> flags to use for the listener</param>
    </member>
    <member name="M:NetworkTables.NetworkTable.AddTableListenerEx(System.Action{NetworkTables.Tables.ITable,System.String,NetworkTables.Value,NetworkTables.NotifyFlags},NetworkTables.NotifyFlags)">
      <summary>
            Add a listener to changes to the table.
            </summary>
      <param name="listenerDelegate">The Table Listener Delegate to add.</param>
      <param name="flags">The <see cref="T:NetworkTables.EntryFlags" /> flags to use for the listener</param>
    </member>
    <member name="M:NetworkTables.NetworkTable.AddTableListenerEx(System.String,NetworkTables.Tables.ITableListener,NetworkTables.NotifyFlags)">
      <summary>
            Add a listener for changes to a specific key in the table.
            </summary>
      <param name="key">The key to listen for</param>
      <param name="listener">The listener to add</param>
      <param name="flags">The <see cref="T:NetworkTables.EntryFlags" /> flags to use for the listener</param>
    </member>
    <member name="M:NetworkTables.NetworkTable.AddTableListenerEx(System.String,System.Action{NetworkTables.Tables.ITable,System.String,NetworkTables.Value,NetworkTables.NotifyFlags},NetworkTables.NotifyFlags)">
      <summary>
            Add a listener for changes to a specific key in the table.
            </summary>
      <param name="key">The key to listen for</param>
      <param name="listenerDelegate">The Table Listener Delegate to add.</param>
      <param name="flags">The <see cref="T:NetworkTables.EntryFlags" /> flags to use for the listener</param>
    </member>
    <member name="M:NetworkTables.NetworkTable.ClearFlags(System.String,NetworkTables.EntryFlags)">
      <summary>
            Clears flags on the specified key in this table.
            </summary>
      <param name="key">The key name.</param>
      <param name="flags">The flags to clear. (Bitmask)</param>
    </member>
    <member name="M:NetworkTables.NetworkTable.ClearPersistent(System.String)">
      <summary>
            Stop making a key's value persistent through program restarts.
            </summary>
      <param name="key">The key name (cannot be null).</param>
    </member>
    <member name="M:NetworkTables.NetworkTable.Connections">
      <summary>
            Gets a list of all the connections attached to this instance.
            </summary>
      <returns>An array of all connections attached to this instance.</returns>
    </member>
    <member name="M:NetworkTables.NetworkTable.ContainsKey(System.String)">
      <summary>
            Checkts the table and tells if it contains the specified key.
            </summary>
      <param name="key">The key to be checked.</param>
      <returns>True if the table contains the key, otherwise false.</returns>
    </member>
    <member name="M:NetworkTables.NetworkTable.ContainsSubTable(System.String)">
      <summary>
            Checks the table and tells if if contains the specified sub-table.
            </summary>
      <param name="key">The sub-table to check for</param>
      <returns>True if the table contains the sub-table, otherwise false</returns>
    </member>
    <member name="F:NetworkTables.NetworkTable.DefaultPersistentFileName">
      <summary>
            The default file name used for Persistent Storage.
            </summary>
    </member>
    <member name="F:NetworkTables.NetworkTable.DefaultPort">
      <summary>The default port NetworkTables listens on.</summary>
    </member>
    <member name="M:NetworkTables.NetworkTable.Delete(System.String)">
      <summary>
            Deletes the specifed key in this table.
            </summary>
      <param name="key">The key name.</param>
    </member>
    <member name="M:NetworkTables.NetworkTable.Flush">
      <summary>
            Flushes all updated values immediately to the network.
            </summary>
    </member>
    <member name="M:NetworkTables.NetworkTable.GetBoolean(System.String)">
      <summary>
            Returns the value that the key maps to.
            </summary>
      <param name="key">The key name.</param>
      <returns>The requested value.</returns>
      <exception cref="T:NetworkTables.Exceptions.TableKeyNotDefinedException">Thrown if the key does not 
            exist in the table, or if the key is null.</exception>
      <exception cref="T:NetworkTables.Exceptions.TableKeyDifferentTypeException">Thrown if the key exists
            as a different type in the table.</exception>
    </member>
    <member name="M:NetworkTables.NetworkTable.GetBoolean(System.String,System.Boolean)">
      <summary>
            Returns the value that the key maps to.
            </summary>
      <param name="key">The key name.</param>
      <param name="defaultValue">The default value if the key does not exist or is null</param>
      <returns>The value requested, or defaultValue if the key does not exist or is null.</returns>
    </member>
    <member name="M:NetworkTables.NetworkTable.GetBooleanArray(System.String)">
      <summary>
            Returns the value array that the key maps to.
            </summary>
      <param name="key">The key name.</param>
      <returns>The requested value array.</returns>
      <exception cref="T:NetworkTables.Exceptions.TableKeyNotDefinedException">Thrown if the key does not 
            exist in the table, or if the key is null.</exception>
      <exception cref="T:NetworkTables.Exceptions.TableKeyDifferentTypeException">Thrown if the key exists
            as a different type in the table.</exception>
    </member>
    <member name="M:NetworkTables.NetworkTable.GetBooleanArray(System.String,System.Boolean[])">
      <summary>
            Returns the value array that the key maps to.
            </summary>
      <param name="key">The key name.</param>
      <param name="defaultValue">The default value if the key does not exist or is null</param>
      <returns>The value array requested, or defaultValue if the key does not exist or is null.</returns>
    </member>
    <member name="M:NetworkTables.NetworkTable.GetFlags(System.String)">
      <summary>
            Returns the flags for the specified key.
            </summary>
      <param name="key">The key name.</param>
      <returns>The flags attached to the key.</returns>
    </member>
    <member name="M:NetworkTables.NetworkTable.GetKeys">
      <summary>
            Gets a set of all the keys contained in the table.
            </summary>
      <returns>A set of all keys currently in the table.</returns>
    </member>
    <member name="M:NetworkTables.NetworkTable.GetKeys(NetworkTables.NtType)">
      <summary>
            Gets a set of all the keys contained in the table with the specified type.
            </summary>
      <param name="types">Bitmask of types to check for; 0 is treated as a "don't care".</param>
      <returns>A set of all keys currently in the table.</returns>
    </member>
    <member name="M:NetworkTables.NetworkTable.GetNumber(System.String)">
      <summary>
            Returns the value that the key maps to.
            </summary>
      <param name="key">The key name.</param>
      <returns>The requested value.</returns>
      <exception cref="T:NetworkTables.Exceptions.TableKeyNotDefinedException">Thrown if the key does not 
            exist in the table, or if the key is null.</exception>
      <exception cref="T:NetworkTables.Exceptions.TableKeyDifferentTypeException">Thrown if the key exists
            as a different type in the table.</exception>
    </member>
    <member name="M:NetworkTables.NetworkTable.GetNumber(System.String,System.Double)">
      <summary>
            Returns the value that the key maps to.
            </summary>
      <param name="key">The key name.</param>
      <param name="defaultValue">The default value if the key does not exist or is null</param>
      <returns>The value requested, or defaultValue if the key does not exist or is null.</returns>
    </member>
    <member name="M:NetworkTables.NetworkTable.GetNumberArray(System.String)">
      <summary>
            Returns the value array that the key maps to.
            </summary>
      <param name="key">The key name.</param>
      <returns>The requested value array.</returns>
      <exception cref="T:NetworkTables.Exceptions.TableKeyNotDefinedException">Thrown if the key does not 
            exist in the table, or if the key is null.</exception>
      <exception cref="T:NetworkTables.Exceptions.TableKeyDifferentTypeException">Thrown if the key exists
            as a different type in the table.</exception>
    </member>
    <member name="M:NetworkTables.NetworkTable.GetNumberArray(System.String,System.Double[])">
      <summary>
            Returns the value array that the key maps to.
            </summary>
      <param name="key">The key name.</param>
      <param name="defaultValue">The default value if the key does not exist or is null</param>
      <returns>The value array requested, or defaultValue if the key does not exist or is null.</returns>
    </member>
    <member name="M:NetworkTables.NetworkTable.GetRaw(System.String)">
      <summary>
            Returns the value array that the key maps to.
            </summary>
      <param name="key">The key name.</param>
      <returns>The requested value array.</returns>
      <exception cref="T:NetworkTables.Exceptions.TableKeyNotDefinedException">Thrown if the key does not 
            exist in the table, or if the key is null.</exception>
      <exception cref="T:NetworkTables.Exceptions.TableKeyDifferentTypeException">Thrown if the key exists
            as a different type in the table.</exception>
    </member>
    <member name="M:NetworkTables.NetworkTable.GetRaw(System.String,System.Byte[])">
      <summary>
            Returns the value array that the key maps to.
            </summary>
      <param name="key">The key name.</param>
      <param name="defaultValue">The default value if the key does not exist or is null</param>
      <returns>The value array requested, or defaultValue if the key does not exist or is null.</returns>
    </member>
    <member name="M:NetworkTables.NetworkTable.GetString(System.String)">
      <summary>
            Returns the value that the key maps to.
            </summary>
      <param name="key">The key name.</param>
      <returns>The requested value.</returns>
      <exception cref="T:NetworkTables.Exceptions.TableKeyNotDefinedException">Thrown if the key does not 
            exist in the table, or if the key is null.</exception>
      <exception cref="T:NetworkTables.Exceptions.TableKeyDifferentTypeException">Thrown if the key exists
            as a different type in the table.</exception>
    </member>
    <member name="M:NetworkTables.NetworkTable.GetString(System.String,System.String)">
      <summary>
            Returns the value that the key maps to.
            </summary>
      <param name="key">The key name.</param>
      <param name="defaultValue">The default value if the key does not exist or is null</param>
      <returns>The value requested, or defaultValue if the key does not exist or is null.</returns>
    </member>
    <member name="M:NetworkTables.NetworkTable.GetStringArray(System.String)">
      <summary>
            Returns the value array that the key maps to.
            </summary>
      <param name="key">The key name.</param>
      <returns>The requested value array.</returns>
      <exception cref="T:NetworkTables.Exceptions.TableKeyNotDefinedException">Thrown if the key does not 
            exist in the table, or if the key is null.</exception>
      <exception cref="T:NetworkTables.Exceptions.TableKeyDifferentTypeException">Thrown if the key exists
            as a different type in the table.</exception>
    </member>
    <member name="M:NetworkTables.NetworkTable.GetStringArray(System.String,System.String[])">
      <summary>
            Returns the value array that the key maps to.
            </summary>
      <param name="key">The key name.</param>
      <param name="defaultValue">The default value if the key does not exist or is null</param>
      <returns>The value array requested, or defaultValue if the key does not exist or is null.</returns>
    </member>
    <member name="M:NetworkTables.NetworkTable.GetSubTable(System.String)">
      <summary>
            Returns the <see cref="T:NetworkTables.Tables.ITable" /> at the specified key. If there is no 
            table at the specified key, it will create a new table.
            </summary>
      <param name="key">The key name.</param>
      <returns>The <see cref="T:NetworkTables.Tables.ITable" /> to be returned.</returns>
    </member>
    <member name="M:NetworkTables.NetworkTable.GetSubTables">
      <summary>
            Gets a set of all the sub-tables contained in the table.
            </summary>
      <returns>A set of all subtables currently contained in the table.</returns>
    </member>
    <member name="M:NetworkTables.NetworkTable.GetTable(System.String)">
      <summary>
            Gets the table with the specified key.
            </summary>
      <param name="key">The network table key to request.</param>
      <returns>The <see cref="T:NetworkTables.NetworkTable" /> requested.</returns>
    </member>
    <member name="M:NetworkTables.NetworkTable.GetValue(System.String)">
      <summary>
            Returns the value that the key maps to.
            </summary>
      <param name="key">The key name.</param>
      <returns>The requested value.</returns>
      <exception cref="T:NetworkTables.Exceptions.TableKeyNotDefinedException">Thrown if the key does not 
            exist in the table, or if the key is null.</exception>
      <exception cref="T:NetworkTables.Exceptions.TableKeyDifferentTypeException">Thrown if the key exists
            as a different type in the table.</exception>
    </member>
    <member name="M:NetworkTables.NetworkTable.GetValue(System.String,NetworkTables.Value)">
      <summary>
            Returns the value that the key maps to.
            </summary>
      <param name="key">The key name.</param>
      <param name="defaultValue">The default value if the key does not exist or is null</param>
      <returns>The value requested, or defaultValue if the key does not exist or is null.</returns>
    </member>
    <member name="M:NetworkTables.NetworkTable.GlobalDeleteAll">
      <summary>
            Deletes ALL keys in ALL subtables. Use with caution!
            </summary>
    </member>
    <member name="M:NetworkTables.NetworkTable.Initialize">
      <summary>
            Initializes NetworkTables. Please call <see cref="M:NetworkTables.NetworkTable.SetServerMode" /> or <see cref="M:NetworkTables.NetworkTable.SetClientMode" />
            first.
            </summary>
    </member>
    <member name="P:NetworkTables.NetworkTable.IsConnected">
      <summary>
            Gets if the NetworkTables is connected to a client or server.
            </summary>
    </member>
    <member name="M:NetworkTables.NetworkTable.IsPersistent(System.String)">
      <summary>
            Returns whether a value is persistent through program restarts.
            </summary>
      <param name="key">The key name (cannot be null).</param>
      <returns>True if the value is persistent.</returns>
    </member>
    <member name="P:NetworkTables.NetworkTable.IsServer">
      <summary>
            Gets if the NetworkTables instance is a Server.
            </summary>
    </member>
    <member name="M:NetworkTables.NetworkTable.LoadPersistent(System.String)">
      <summary>
            Loads persistent keys from a file. The server does this automatically.
            </summary>
      <param name="filename">The file name.</param>
      <returns>A List of warnings (errors result in an exception instead.)</returns>
      <exception cref="T:NetworkTables.Exceptions.PersistentException">Thrown if there is an error
            loading the file.</exception>
    </member>
    <member name="M:NetworkTables.NetworkTable.LoadPersistentAsync(System.String)">
      <summary>
            Loads persistent keys from a file asynchronously. The server does this automatically.
            </summary>
      <param name="filename">The file name.</param>
      <returns>A List of warnings (errors result in an exception instead.)</returns>
      <exception cref="T:NetworkTables.Exceptions.PersistentException">Thrown if there is an error
            loading the file.</exception>
    </member>
    <member name="F:NetworkTables.NetworkTable.PathSeperatorChar">
      <summary>The character used to seperate tables and keys.</summary>
    </member>
    <member name="M:NetworkTables.NetworkTable.PutBoolean(System.String,System.Boolean)">
      <summary>
            Maps the specified key to the specified value in the table. 
            </summary>
      <param name="key">The key to map the value to.</param>
      <param name="value">The value to set.</param>
      <returns>True if the key was set properly, otherwise false</returns>
    </member>
    <member name="M:NetworkTables.NetworkTable.PutBooleanArray(System.String,System.Collections.Generic.IList{System.Boolean})">
      <summary>
            Maps the specified key to the specified array of values in the table. 
            </summary>
      <param name="key">The key to map the value to.</param>
      <param name="value">The value to set.</param>
      <returns>True if the key was set properly, otherwise false</returns>
    </member>
    <member name="M:NetworkTables.NetworkTable.PutNumber(System.String,System.Double)">
      <summary>
            Maps the specified key to the specified value in the table. 
            </summary>
      <param name="key">The key to map the value to.</param>
      <param name="value">The value to set.</param>
      <returns>True if the key was set properly, otherwise false</returns>
    </member>
    <member name="M:NetworkTables.NetworkTable.PutNumberArray(System.String,System.Collections.Generic.IList{System.Double})">
      <summary>
            Maps the specified key to the specified array of values in the table. 
            </summary>
      <param name="key">The key to map the value to.</param>
      <param name="value">The value to set.</param>
      <returns>True if the key was set properly, otherwise false</returns>
    </member>
    <member name="M:NetworkTables.NetworkTable.PutRaw(System.String,System.Collections.Generic.IList{System.Byte})">
      <summary>
            Put a raw value (byte array) in the table.
            </summary>
      <param name="key">The key to be assigned to.</param>
      <param name="value">The value that will be assigned.</param>
      <returns>False if the table key already exists with a different type.</returns>
    </member>
    <member name="M:NetworkTables.NetworkTable.PutString(System.String,System.String)">
      <summary>
            Maps the specified key to the specified value in the table. 
            </summary>
      <param name="key">The key to map the value to.</param>
      <param name="value">The value to set.</param>
      <returns>True if the key was set properly, otherwise false</returns>
    </member>
    <member name="M:NetworkTables.NetworkTable.PutStringArray(System.String,System.Collections.Generic.IList{System.String})">
      <summary>
            Maps the specified key to the specified array of values in the table. 
            </summary>
      <param name="key">The key to map the value to.</param>
      <param name="value">The value to set.</param>
      <returns>True if the key was set properly, otherwise false</returns>
    </member>
    <member name="M:NetworkTables.NetworkTable.PutValue(System.String,NetworkTables.Value)">
      <summary>
            Maps the specified key to the specified value in the table. 
            </summary>
      <param name="key">The key to map the value to.</param>
      <param name="value">The value to set.</param>
      <returns>True if the key was set properly, otherwise false</returns>
      <exception cref="T:System.ArgumentException">Thrown if the value is not a type supported
            by the table.</exception>
    </member>
    <member name="M:NetworkTables.NetworkTable.RemoveConnectionListener(NetworkTables.Tables.IRemoteConnectionListener)">
      <summary>
            Unregister a listener from connection events.
            </summary>
      <param name="listener">The listener to be unregistered.</param>
    </member>
    <member name="M:NetworkTables.NetworkTable.RemoveConnectionListener(System.Action{NetworkTables.Tables.IRemote,NetworkTables.ConnectionInfo,System.Boolean})">
      <summary>
            Unregister a listener delegate from connection events.
            </summary>
      <param name="listener">The listener to be unregistered.</param>
    </member>
    <member name="M:NetworkTables.NetworkTable.RemoveGlobalConnectionListener(NetworkTables.Tables.IRemoteConnectionListener)">
      <summary>
            Unregister a listener from connection events.
            </summary>
      <param name="listener">The listener to be unregistered.</param>
    </member>
    <member name="M:NetworkTables.NetworkTable.RemoveGlobalConnectionListener(System.Action{NetworkTables.Tables.IRemote,NetworkTables.ConnectionInfo,System.Boolean})">
      <summary>
            Unregister a listener delegate from connection events.
            </summary>
      <param name="listener">The listener to be unregistered.</param>
    </member>
    <member name="M:NetworkTables.NetworkTable.RemoveTableListener(NetworkTables.Tables.ITableListener)">
      <summary>
            Remove a listener from receiving table events.
            </summary>
      <param name="listener">The listener to be removed.</param>
    </member>
    <member name="M:NetworkTables.NetworkTable.RemoveTableListener(System.Action{NetworkTables.Tables.ITable,System.String,NetworkTables.Value,NetworkTables.NotifyFlags})">
      <summary>
            Remove a listener from receiving table events.
            </summary>
      <param name="listenerDelegate">The Table Listener Delegate to remove.</param>
    </member>
    <member name="M:NetworkTables.NetworkTable.SavePersistent(System.String)">
      <summary>
            Saves persistent keys to a file. The server does this automatically.
            </summary>
      <param name="filename">The file name.</param>
      <returns>Error string, or null on success</returns>
      <exception cref="T:NetworkTables.Exceptions.PersistentException">Thrown if there is an error
            saving the file.</exception>
    </member>
    <member name="M:NetworkTables.NetworkTable.SavePersistentAsync(System.String)">
      <summary>
            Saves persistent keys to a file asynchronously. The server does this automatically.
            </summary>
      <param name="filename">The file name.</param>
      <returns>Error string, or null on success</returns>
      <exception cref="T:NetworkTables.Exceptions.PersistentException">Thrown if there is an error
            saving the file.</exception>
    </member>
    <member name="M:NetworkTables.NetworkTable.SetClientMode">
      <summary>
            Sets NetworkTables to be a client.
            </summary>
      <exception cref="T:System.InvalidOperationException">This is thrown if Network Tables
            has already been initialized.</exception>
    </member>
    <member name="M:NetworkTables.NetworkTable.SetDefaultBoolean(System.String,System.Boolean)">
      <summary>
            Sets the value in the table at the specified key if it does not exist.
            </summary>
      <param name="key">The key to set</param>
      <param name="defaultValue">The value to set if the key does not exits</param>
      <returns>False if the key exists with a different type, otherwise true</returns>
    </member>
    <member name="M:NetworkTables.NetworkTable.SetDefaultBooleanArray(System.String,System.Collections.Generic.IList{System.Boolean})">
      <summary>
            Sets the value in the table at the specified key if it does not exist.
            </summary>
      <param name="key">The key to set</param>
      <param name="defaultValue">The value to set if the key does not exits</param>
      <returns>False if the key exists with a different type, otherwise true</returns>
    </member>
    <member name="M:NetworkTables.NetworkTable.SetDefaultNumber(System.String,System.Double)">
      <summary>
            Sets the value in the table at the specified key if it does not exist.
            </summary>
      <param name="key">The key to set</param>
      <param name="defaultValue">The value to set if the key does not exits</param>
      <returns>False if the key exists with a different type, otherwise true</returns>
    </member>
    <member name="M:NetworkTables.NetworkTable.SetDefaultNumberArray(System.String,System.Collections.Generic.IList{System.Double})">
      <summary>
            Sets the value in the table at the specified key if it does not exist.
            </summary>
      <param name="key">The key to set</param>
      <param name="defaultValue">The value to set if the key does not exits</param>
      <returns>False if the key exists with a different type, otherwise true</returns>
    </member>
    <member name="M:NetworkTables.NetworkTable.SetDefaultRaw(System.String,System.Collections.Generic.IList{System.Byte})">
      <summary>
            Sets the value in the table at the specified key if it does not exist.
            </summary>
      <param name="key">The key to set</param>
      <param name="defaultValue">The value to set if the key does not exits</param>
      <returns>False if the key exists with a different type, otherwise true</returns>
    </member>
    <member name="M:NetworkTables.NetworkTable.SetDefaultString(System.String,System.String)">
      <summary>
            Sets the value in the table at the specified key if it does not exist.
            </summary>
      <param name="key">The key to set</param>
      <param name="defaultValue">The value to set if the key does not exits</param>
      <returns>False if the key exists with a different type, otherwise true</returns>
    </member>
    <member name="M:NetworkTables.NetworkTable.SetDefaultStringArray(System.String,System.Collections.Generic.IList{System.String})">
      <summary>
            Sets the value in the table at the specified key if it does not exist.
            </summary>
      <param name="key">The key to set</param>
      <param name="defaultValue">The value to set if the key does not exits</param>
      <returns>False if the key exists with a different type, otherwise true</returns>
    </member>
    <member name="M:NetworkTables.NetworkTable.SetDefaultValue(System.String,NetworkTables.Value)">
      <summary>
            Sets the value in the table at the specified key if it does not exist.
            </summary>
      <param name="key">The key to set</param>
      <param name="defaultValue">The value to set if the key does not exits</param>
      <returns>False if the key exists with a different type, otherwise true</returns>
    </member>
    <member name="M:NetworkTables.NetworkTable.SetDSClientEnabled(System.Boolean)">
      <summary>
            Set true to enable connection to the local robot IP address
            (defaults to enabled)
            </summary>
      <param name="enabled">True to enabled using the DS connection</param>
    </member>
    <member name="M:NetworkTables.NetworkTable.SetFlags(System.String,NetworkTables.EntryFlags)">
      <summary>
            Sets flags on the specified key in this table.
            </summary>
      <param name="key">The key name.</param>
      <param name="flags">The flags to set. (Bitmask)</param>
    </member>
    <member name="M:NetworkTables.NetworkTable.SetIPAddress(System.Collections.Generic.IList{System.String})">
      <summary>
            Sets the IP address that will be connected to in client mode using round robin order.
            </summary>
      <param name="addresses">The IP address to connect to in client mode using round robin order.</param>
    </member>
    <member name="M:NetworkTables.NetworkTable.SetIPAddress(System.String)">
      <summary>
            Sets the IP address that will be connected to in client mode.
            </summary>
      <param name="address">The IP address to connect to in client mode</param>
    </member>
    <member name="M:NetworkTables.NetworkTable.SetNetworkIdentity(System.String)">
      <summary>
            Sets the Network Identity
            </summary>
      <param name="name">The name to identify this program as on the network.</param>
    </member>
    <member name="M:NetworkTables.NetworkTable.SetPersistent(System.String)">
      <summary>
            Makes a key's value persistent through program restarts.
            </summary>
      <param name="key">The key name (cannot be null).</param>
    </member>
    <member name="M:NetworkTables.NetworkTable.SetPersistentFilename(System.String)">
      <summary>
            Sets the Persistent file name.
            </summary>
      <param name="filename">The filename that the NetworkTables server uses
            for automatic loading and saving of persistent values.</param>
    </member>
    <member name="M:NetworkTables.NetworkTable.SetPort(System.Int32)">
      <summary>
            Sets the Port for NetworkTables to connect to in client mode or listen to
            in server mode.
            </summary>
      <param name="port">The port number to listen on or connect to.</param>
    </member>
    <member name="M:NetworkTables.NetworkTable.SetServerMode">
      <summary> 
            Sets NetworkTables to be a server
            </summary>
      <exception cref="T:System.InvalidOperationException">This is thrown if Network Tables
            has already been initialized.</exception>
    </member>
    <member name="M:NetworkTables.NetworkTable.SetTeam(System.Int32)">
      <summary>
            Sets the team the robot is configured for. This will set the Mdns
            address that NetworkTables will connect to in client mode.
            </summary>
      <param name="team">The team number</param>
    </member>
    <member name="M:NetworkTables.NetworkTable.SetUpdateRate(System.Double)">
      <summary>
            Sets the periodic update rate of the NetworkTables in seconds.
            </summary>
      <param name="interval">The update interval in seconds (0.01 to 1.0).</param>
    </member>
    <member name="M:NetworkTables.NetworkTable.Shutdown">
      <summary>
            Shuts down NetworkTables.
            </summary>
    </member>
    <member name="M:NetworkTables.NetworkTable.ToString">
      <summary>Returns a string that represents the current object.</summary>
      <returns>A string that represents the current object.</returns>
    </member>
    <member name="T:NetworkTables.NotifyFlags">
      <summary>
            The flags avalible for TableListeners
            </summary>
    </member>
    <member name="F:NetworkTables.NotifyFlags.NotifyNone">
      <summary>
             Notify nobody
            </summary>
    </member>
    <member name="F:NetworkTables.NotifyFlags.NotifyImmediate">
      <summary>
            Initial listener addition
            </summary>
    </member>
    <member name="F:NetworkTables.NotifyFlags.NotifyLocal">
      <summary>
            Changed locally
            </summary>
    </member>
    <member name="F:NetworkTables.NotifyFlags.NotifyNew">
      <summary>
            Newly created entry
            </summary>
    </member>
    <member name="F:NetworkTables.NotifyFlags.NotifyDelete">
      <summary>
            Deleted entry
            </summary>
    </member>
    <member name="F:NetworkTables.NotifyFlags.NotifyUpdate">
      <summary>
            Value changed for entry
            </summary>
    </member>
    <member name="F:NetworkTables.NotifyFlags.NotifyFlagsChanged">
      <summary>
            Flags changed for entry
            </summary>
    </member>
    <member name="T:NetworkTables.NtCore">
      <summary>
            This class contains all NtCore methods exposed by the underlying library.
            </summary>
    </member>
    <member name="M:NetworkTables.NtCore.AddConnectionListener(NetworkTables.ConnectionListenerCallback,System.Boolean)">
      <summary>
            Adds a connection listener to the table
            </summary>
      <param name="callback">The callback to call when a new remote connects or disconnects</param>
      <param name="immediateNotify">True to notify immediately with all connected remotes</param>
      <returns>The id of the connection listener</returns>
    </member>
    <member name="M:NetworkTables.NtCore.AddEntryListener(System.String,NetworkTables.EntryListenerCallback,NetworkTables.NotifyFlags)">
      <summary>
            Adds a listener for a specified prefix in the table
            </summary>
      <param name="prefix">The prefix to listen for in the table</param>
      <param name="callback">The callback to call when any entry with the specified prefix is updated</param>
      <param name="flags">The flags to use for notifying</param>
      <returns>The id of the entry listener</returns>
    </member>
    <member name="M:NetworkTables.NtCore.ContainsEntry(System.String)">
      <summary>
            Gets if the table contains a specific entry
            </summary>
      <param name="name">The entry name</param>
      <returns>True if the entry exists, otherwise false</returns>
    </member>
    <member name="M:NetworkTables.NtCore.DeleteAllEntries">
      <summary>
            Deletes all non-persistent entries from the table
             </summary>
    </member>
    <member name="M:NetworkTables.NtCore.DeleteEntry(System.String)">
      <summary>
            Deletes an entry from the table
            </summary>
      <param name="name">The entry name</param>
    </member>
    <member name="M:NetworkTables.NtCore.Flush">
      <summary>
            Forces an immediate update of all entry changes to the network
            </summary>
    </member>
    <member name="M:NetworkTables.NtCore.GetConnections">
      <summary>
            Gets an array of all the connections in the table.
            </summary>
      <returns>The table's remote connections</returns>
    </member>
    <member name="M:NetworkTables.NtCore.GetEntryBoolean(System.String)">
      <summary>
            Gets an entry value
            </summary>
      <param name="name">The entry name</param>
      <returns>The value in the table</returns>
      <exception cref="T:NetworkTables.Exceptions.TableKeyNotDefinedException">Thrown if the key does
            not exist in the table</exception>
      <exception cref="T:NetworkTables.Exceptions.TableKeyDifferentTypeException">Thrown if the type
            requested does not match the type in the table</exception>
    </member>
    <member name="M:NetworkTables.NtCore.GetEntryBoolean(System.String,System.Boolean)">
      <summary>
            Gets an entry value
            </summary>
      <param name="name">The entry name</param>
      <param name="defaultValue">The default value if the key does not exist or is the wrong typel</param>
      <returns>The value requested, or defaultValue if the key does not exist or is the wrong type</returns>
    </member>
    <member name="M:NetworkTables.NtCore.GetEntryBooleanArray(System.String)">
      <summary>
            Gets an entry value
            </summary>
      <param name="name">The entry name</param>
      <returns>The value in the table</returns>
      <exception cref="T:NetworkTables.Exceptions.TableKeyNotDefinedException">Thrown if the key does
            not exist in the table</exception>
      <exception cref="T:NetworkTables.Exceptions.TableKeyDifferentTypeException">Thrown if the type
            requested does not match the type in the table</exception>
    </member>
    <member name="M:NetworkTables.NtCore.GetEntryBooleanArray(System.String,System.Boolean[])">
      <summary>
            Gets an entry value
            </summary>
      <param name="name">The entry name</param>
      <param name="defaultValue">The default value if the key does not exist or is the wrong typel</param>
      <returns>The value requested, or defaultValue if the key does not exist or is the wrong type</returns>
    </member>
    <member name="M:NetworkTables.NtCore.GetEntryDouble(System.String)">
      <summary>
            Gets an entry value
            </summary>
      <param name="name">The entry name</param>
      <returns>The value in the table</returns>
      <exception cref="T:NetworkTables.Exceptions.TableKeyNotDefinedException">Thrown if the key does
            not exist in the table</exception>
      <exception cref="T:NetworkTables.Exceptions.TableKeyDifferentTypeException">Thrown if the type
            requested does not match the type in the table</exception>
    </member>
    <member name="M:NetworkTables.NtCore.GetEntryDouble(System.String,System.Double)">
      <summary>
            Gets an entry value
            </summary>
      <param name="name">The entry name</param>
      <param name="defaultValue">The default value if the key does not exist or is the wrong typel</param>
      <returns>The value requested, or defaultValue if the key does not exist or is the wrong type</returns>
    </member>
    <member name="M:NetworkTables.NtCore.GetEntryDoubleArray(System.String)">
      <summary>
            Gets an entry value
            </summary>
      <param name="name">The entry name</param>
      <returns>The value in the table</returns>
      <exception cref="T:NetworkTables.Exceptions.TableKeyNotDefinedException">Thrown if the key does
            not exist in the table</exception>
      <exception cref="T:NetworkTables.Exceptions.TableKeyDifferentTypeException">Thrown if the type
            requested does not match the type in the table</exception>
    </member>
    <member name="M:NetworkTables.NtCore.GetEntryDoubleArray(System.String,System.Double[])">
      <summary>
            Gets an entry value
            </summary>
      <param name="name">The entry name</param>
      <param name="defaultValue">The default value if the key does not exist or is the wrong typel</param>
      <returns>The value requested, or defaultValue if the key does not exist or is the wrong type</returns>
    </member>
    <member name="M:NetworkTables.NtCore.GetEntryFlags(System.String)">
      <summary>
            Gets flags associated with an entry
            </summary>
      <param name="name">The entry names</param>
      <returns>Bitmask of the flags contained in the entry</returns>
    </member>
    <member name="M:NetworkTables.NtCore.GetEntryInfo(System.String,NetworkTables.NtType)">
      <summary>
            Gets an array of entry information
            </summary>
      <param name="prefix">A required entry prefix. Only entries with this prefix will be returned</param>
      <param name="types">Bitmask of <see cref="T:NetworkTables.NtType" /> values, 0 is "don't care"</param>
      <returns>Array of entry information</returns>
    </member>
    <member name="M:NetworkTables.NtCore.GetEntryRaw(System.String)">
      <summary>
            Gets an entry value
            </summary>
      <param name="name">The entry name</param>
      <returns>The value in the table</returns>
      <exception cref="T:NetworkTables.Exceptions.TableKeyNotDefinedException">Thrown if the key does
            not exist in the table</exception>
      <exception cref="T:NetworkTables.Exceptions.TableKeyDifferentTypeException">Thrown if the type
            requested does not match the type in the table</exception>
    </member>
    <member name="M:NetworkTables.NtCore.GetEntryRaw(System.String,System.Byte[])">
      <summary>
            Gets an entry value
            </summary>
      <param name="name">The entry name</param>
      <param name="defaultValue">The default value if the key does not exist or is the wrong typel</param>
      <returns>The value requested, or defaultValue if the key does not exist or is the wrong type</returns>
    </member>
    <member name="M:NetworkTables.NtCore.GetEntryString(System.String)">
      <summary>
            Gets an entry value
            </summary>
      <param name="name">The entry name</param>
      <returns>The value in the table</returns>
      <exception cref="T:NetworkTables.Exceptions.TableKeyNotDefinedException">Thrown if the key does
            not exist in the table</exception>
      <exception cref="T:NetworkTables.Exceptions.TableKeyDifferentTypeException">Thrown if the type
            requested does not match the type in the table</exception>
    </member>
    <member name="M:NetworkTables.NtCore.GetEntryString(System.String,System.String)">
      <summary>
            Gets an entry value
            </summary>
      <param name="name">The entry name</param>
      <param name="defaultValue">The default value if the key does not exist or is the wrong typel</param>
      <returns>The value requested, or defaultValue if the key does not exist or is the wrong type</returns>
    </member>
    <member name="M:NetworkTables.NtCore.GetEntryStringArray(System.String)">
      <summary>
            Gets an entry value
            </summary>
      <param name="name">The entry name</param>
      <returns>The value in the table</returns>
      <exception cref="T:NetworkTables.Exceptions.TableKeyNotDefinedException">Thrown if the key does
            not exist in the table</exception>
      <exception cref="T:NetworkTables.Exceptions.TableKeyDifferentTypeException">Thrown if the type
            requested does not match the type in the table</exception>
    </member>
    <member name="M:NetworkTables.NtCore.GetEntryStringArray(System.String,System.String[])">
      <summary>
            Gets an entry value
            </summary>
      <param name="name">The entry name</param>
      <param name="defaultValue">The default value if the key does not exist or is the wrong typel</param>
      <returns>The value requested, or defaultValue if the key does not exist or is the wrong type</returns>
    </member>
    <member name="M:NetworkTables.NtCore.GetEntryValue(System.String)">
      <summary>
            Returns a copy of the current entry value
            </summary>
      <param name="name">The entry name</param>
      <returns>The value in the table</returns>
    </member>
    <member name="M:NetworkTables.NtCore.GetType(System.String)">
      <summary>
            Gets the type of a specified entry
            </summary>
      <param name="name">The entry name</param>
      <returns>The type of the entry. <see cref="F:NetworkTables.NtType.Unassigned" /> if the entry does not exist</returns>
    </member>
    <member name="M:NetworkTables.NtCore.LoadPersistent(System.String)">
      <summary>
            Loads persistent variables from a specified file
            </summary>
      <param name="filename">The file to load from</param>
      <returns>An array of all errors reported during loading</returns>
    </member>
    <member name="M:NetworkTables.NtCore.LoadPersistent(System.String,System.Action{System.Int32,System.String})">
      <summary>
            Loads persistent variables from a specified file
            </summary>
      <param name="filename">The file to load from</param>
      <param name="warn">Function called whenever an error is seen during loading. Int is line number, string is message.</param>
      <returns>Error string, or null on success</returns>
    </member>
    <member name="M:NetworkTables.NtCore.LoadPersistentAsync(System.String)">
      <summary>
            Loads persistent variables from a specified file asynchronously
            </summary>
      <param name="filename">The file to load from</param>
      <returns>An array of all errors reported during loading</returns>
    </member>
    <member name="M:NetworkTables.NtCore.LoadPersistentAsync(System.String,System.Action{System.Int32,System.String})">
      <summary>
            Loads persistent variables from a specified file asynchronously
            </summary>
      <param name="filename">The file to load from</param>
      <param name="warn">Function called whenever an error is seen during loading. Int is line number, string is message.</param>
      <returns>Error string, or null on success</returns>
    </member>
    <member name="M:NetworkTables.NtCore.NotifierDestroyed">
      <summary>
            Gets if the notifier thread for callbacks has been destroyed
            </summary>
      <returns>True if the notifier has been destroyed</returns>
    </member>
    <member name="M:NetworkTables.NtCore.Now">
      <summary>
            Gets the current timestamp of the library to be used for value time comparisons 
            </summary>
      <returns>The current time in milliseconds</returns>
    </member>
    <member name="M:NetworkTables.NtCore.RemoveConnectionListener(System.Int32)">
      <summary>
            Removes a connection listener from the table
            </summary>
      <param name="uid">The connection listener id</param>
    </member>
    <member name="M:NetworkTables.NtCore.RemoveEntryListener(System.Int32)">
      <summary>
            Removed an entry listener from the table
            </summary>
      <param name="uid">The entry listener id</param>
    </member>
    <member name="M:NetworkTables.NtCore.SavePersistent(System.String)">
      <summary>
            Saves all persistent variables to the files specified
            </summary>
      <param name="filename">The file to save to</param>
      <returns>Error string, or null on success</returns>
    </member>
    <member name="M:NetworkTables.NtCore.SavePersistentAsync(System.String)">
      <summary>
            Saves all persistent variables to the files specified asynchronously
            </summary>
      <param name="filename">The file to save to</param>
      <returns>Error string, or null on success</returns>
    </member>
    <member name="M:NetworkTables.NtCore.SetDefaultEntryBoolean(System.String,System.Boolean)">
      <summary>
            Sets an entry value in the table if it does not exist.
            </summary>
      <param name="name">The entry name</param>
      <param name="value">The value to set</param>
      <returns>False if the type does not match existing value</returns>
    </member>
    <member name="M:NetworkTables.NtCore.SetDefaultEntryBooleanArray(System.String,System.Collections.Generic.IList{System.Boolean})">
      <summary>
            Sets an entry value in the table if it does not exist.
            </summary>
      <param name="name">The entry name</param>
      <param name="value">The value to set</param>
      <returns>False if the type does not match existing value</returns>
    </member>
    <member name="M:NetworkTables.NtCore.SetDefaultEntryDouble(System.String,System.Double)">
      <summary>
            Sets an entry value in the table if it does not exist.
            </summary>
      <param name="name">The entry name</param>
      <param name="value">The value to set</param>
      <returns>False if the type does not match existing value</returns>
    </member>
    <member name="M:NetworkTables.NtCore.SetDefaultEntryDoubleArray(System.String,System.Collections.Generic.IList{System.Double})">
      <summary>
            Sets an entry value in the table if it does not exist.
            </summary>
      <param name="name">The entry name</param>
      <param name="value">The value to set</param>
      <returns>False if the type does not match existing value</returns>
    </member>
    <member name="M:NetworkTables.NtCore.SetDefaultEntryRaw(System.String,System.Collections.Generic.IList{System.Byte})">
      <summary>
            Sets an entry value in the table if it does not exist.
            </summary>
      <param name="name">The entry name</param>
      <param name="value">The value to set</param>
      <returns>False if the type does not match existing value</returns>
    </member>
    <member name="M:NetworkTables.NtCore.SetDefaultEntryString(System.String,System.String)">
      <summary>
            Sets an entry value in the table if it does not exist.
            </summary>
      <param name="name">The entry name</param>
      <param name="value">The value to set</param>
      <returns>False if the type does not match existing value</returns>
    </member>
    <member name="M:NetworkTables.NtCore.SetDefaultEntryStringArray(System.String,System.Collections.Generic.IList{System.String})">
      <summary>
            Sets an entry value in the table if it does not exist.
            </summary>
      <param name="name">The entry name</param>
      <param name="value">The value to set</param>
      <returns>False if the type does not match existing value</returns>
    </member>
    <member name="M:NetworkTables.NtCore.SetDefaultEntryValue(System.String,NetworkTables.Value)">
      <summary>
            Sets an entry value in the table if it does not exist.
            </summary>
      <param name="name">The entry name</param>
      <param name="value">The value to set</param>
      <returns>False if the type does not match existing value</returns>
    </member>
    <member name="M:NetworkTables.NtCore.SetEntryBoolean(System.String,System.Boolean,System.Boolean)">
      <summary>
            Sets an entry value
            </summary>
      <param name="name">The entry name</param>
      <param name="value">The value to set</param>
      <param name="force">True to force an update even if types are different</param>
      <returns>True on success, otherwise false</returns>
    </member>
    <member name="M:NetworkTables.NtCore.SetEntryBooleanArray(System.String,System.Collections.Generic.IList{System.Boolean},System.Boolean)">
      <summary>
            Sets an entry value
            </summary>
      <param name="name">The entry name</param>
      <param name="value">The value to set</param>
      <param name="force">True to force an update even if types are different</param>
      <returns>True on success, otherwise false</returns>
    </member>
    <member name="M:NetworkTables.NtCore.SetEntryDouble(System.String,System.Double,System.Boolean)">
      <summary>
            Sets an entry value
            </summary>
      <param name="name">The entry name</param>
      <param name="value">The value to set</param>
      <param name="force">True to force an update even if types are different</param>
      <returns>True on success, otherwise false</returns>
    </member>
    <member name="M:NetworkTables.NtCore.SetEntryDoubleArray(System.String,System.Collections.Generic.IList{System.Double},System.Boolean)">
      <summary>
            Sets an entry value
            </summary>
      <param name="name">The entry name</param>
      <param name="value">The value to set</param>
      <param name="force">True to force an update even if types are different</param>
      <returns>True on success, otherwise false</returns>
    </member>
    <member name="M:NetworkTables.NtCore.SetEntryFlags(System.String,NetworkTables.EntryFlags)">
      <summary>
            Sets flags associated with an entry
            </summary>
      <param name="name">The entry name</param>
      <param name="flags">The bitmask of the flags to set</param>
    </member>
    <member name="M:NetworkTables.NtCore.SetEntryRaw(System.String,System.Collections.Generic.IList{System.Byte},System.Boolean)">
      <summary>
            Sets an entry value
            </summary>
      <param name="name">The entry name</param>
      <param name="value">The value to set</param>
      <param name="force">True to force an update even if types are different</param>
      <returns>True on success, otherwise false</returns>
    </member>
    <member name="M:NetworkTables.NtCore.SetEntryString(System.String,System.String,System.Boolean)">
      <summary>
            Sets an entry value
            </summary>
      <param name="name">The entry name</param>
      <param name="value">The value to set</param>
      <param name="force">True to force an update even if types are different</param>
      <returns>True on success, otherwise false</returns>
    </member>
    <member name="M:NetworkTables.NtCore.SetEntryStringArray(System.String,System.Collections.Generic.IList{System.String},System.Boolean)">
      <summary>
            Sets an entry value
            </summary>
      <param name="name">The entry name</param>
      <param name="value">The value to set</param>
      <param name="force">True to force an update even if types are different</param>
      <returns>True on success, otherwise false</returns>
    </member>
    <member name="M:NetworkTables.NtCore.SetEntryTypeValue(System.String,NetworkTables.Value)">
      <summary>
            Sets a new entry value, forcing an update on a type mismatch
            </summary>
      <param name="name">The entry name</param>
      <param name="value">The value to set</param>
    </member>
    <member name="M:NetworkTables.NtCore.SetEntryValue(System.String,NetworkTables.Value)">
      <summary>
            Sets a new entry value
            </summary>
      <param name="name">The entry name</param>
      <param name="value">The value to set</param>
      <returns>True on successful set, false on error</returns>
    </member>
    <member name="M:NetworkTables.NtCore.SetLogger(NetworkTables.LogFunc,NetworkTables.LogLevel)">
      <summary>
            Sets the logger to be used when an error is encountered by NetworkTables
            </summary>
      <param name="func">The function to use to log</param>
      <param name="minLevel">The minimum level required to log</param>
    </member>
    <member name="M:NetworkTables.NtCore.SetNetworkIdentity(System.String)">
      <summary>
            Sets the remote identity for this table
            </summary>
      <param name="name">The id</param>
    </member>
    <member name="M:NetworkTables.NtCore.SetServer(System.Collections.Generic.IList{NetworkTables.NtIPAddress})">
      <summary>
            Sets the list of servers to connect to as a client
            </summary>
      <param name="servers">List of servers to try to connect to</param>
    </member>
    <member name="M:NetworkTables.NtCore.SetServer(System.String,System.Int32)">
      <summary>
            Sets the server to connect to as a client
            </summary>
      <param name="serverName">The server name</param>
      <param name="port">The port</param>
    </member>
    <member name="M:NetworkTables.NtCore.SetUpdateRate(System.Double)">
      <summary>
            Sets the update rate for the table (seconds)
            </summary>
      <param name="interval">The interval to update the table in (seconds)</param>
    </member>
    <member name="M:NetworkTables.NtCore.StartClient">
      <summary>
            Starts this table in client mode, potentially using the DS to get IP
            </summary>
    </member>
    <member name="M:NetworkTables.NtCore.StartClient(System.Collections.Generic.IList{NetworkTables.NtIPAddress})">
      <summary>
            Starts this table in client mode attempting to connect to multiple servers
            in round robin fashion
            </summary>
      <param name="servers">The servers to try and connect to</param>
    </member>
    <member name="M:NetworkTables.NtCore.StartClient(System.String,System.Int32)">
      <summary>
            Starts this table in client mode
            </summary>
      <param name="serverName">The server name</param>
      <param name="port">The server port</param>
    </member>
    <member name="M:NetworkTables.NtCore.StartDSClient(System.Int32)">
      <summary>
            Starts the DS client to look for the robot IP
            </summary>
      <param name="port">The NetworkTables port to connect to</param>
    </member>
    <member name="M:NetworkTables.NtCore.StartServer(System.String,System.String,System.Int32)">
      <summary>
            Starts this table in server mode
            </summary>
      <param name="persistFilename">The filename to use for the persistent file</param>
      <param name="listenAddress">The specific ip address to listen on</param>
      <param name="port">The port to listen on</param>
    </member>
    <member name="M:NetworkTables.NtCore.StopClient">
      <summary>
            Stops the client if it is running
            </summary>
    </member>
    <member name="M:NetworkTables.NtCore.StopDSClient">
      <summary>
            Stops the DS client
            </summary>
    </member>
    <member name="M:NetworkTables.NtCore.StopNotifier">
      <summary>
            Stops the notifier listener thread if it is running
            </summary>
    </member>
    <member name="M:NetworkTables.NtCore.StopRpcServer">
      <summary>
            Stops the Rpc server if it is running
            </summary>
    </member>
    <member name="M:NetworkTables.NtCore.StopServer">
      <summary>
            Stops the server if it is running
            </summary>
    </member>
    <member name="T:NetworkTables.NtIPAddress">
      <summary>
            A NetworkTables IP Address
            </summary>
    </member>
    <member name="M:NetworkTables.NtIPAddress.#ctor(System.String,System.Int32)">
      <summary>
            Creates a new NetworkTable IP Address
            </summary>
      <param name="ip">The IP Address</param>
      <param name="port">The Port</param>
    </member>
    <member name="P:NetworkTables.NtIPAddress.IpAddress">
      <summary>
            The IP Address
            </summary>
    </member>
    <member name="P:NetworkTables.NtIPAddress.Port">
      <summary>
            The Port
            </summary>
    </member>
    <member name="T:NetworkTables.NtType">
      <summary>
            An enumeration of all types allowed in the NetworkTables.
            </summary>
    </member>
    <member name="F:NetworkTables.NtType.Unassigned">
      <summary>
            No type assigned
            </summary>
    </member>
    <member name="F:NetworkTables.NtType.Boolean">
      <summary>
            Boolean type
            </summary>
    </member>
    <member name="F:NetworkTables.NtType.Double">
      <summary>
            Double type
            </summary>
    </member>
    <member name="F:NetworkTables.NtType.String">
      <summary>
            String type
            </summary>
    </member>
    <member name="F:NetworkTables.NtType.Raw">
      <summary>
            Raw type
            </summary>
    </member>
    <member name="F:NetworkTables.NtType.BooleanArray">
      <summary>
            Boolean Array type
            </summary>
    </member>
    <member name="F:NetworkTables.NtType.DoubleArray">
      <summary>
            Double Array type
            </summary>
    </member>
    <member name="F:NetworkTables.NtType.StringArray">
      <summary>
            String Array type
            </summary>
    </member>
    <member name="F:NetworkTables.NtType.Rpc">
      <summary>
            Rpc type
            </summary>
    </member>
    <member name="T:NetworkTables.RemoteProcedureCall">
      <summary>
            NetworkTables client to server remote procedure calls
            </summary>
    </member>
    <member name="M:NetworkTables.RemoteProcedureCall.CallRpc(System.String,System.Collections.Generic.IList{NetworkTables.Value})">
      <summary>
            Calls a procedure on a remote server
            </summary>
      <param name="name">The name of the Rpc</param>
      <param name="param">The data to send for the request</param>
      <returns>The Rpc call id</returns>
    </member>
    <member name="M:NetworkTables.RemoteProcedureCall.CallRpc(System.String,System.Collections.Generic.IList{System.Byte})">
      <summary>
            Calls a procedure on a remote server
            </summary>
      <param name="name">The name of the Rpc</param>
      <param name="param">The data to send for the request</param>
      <returns>The Rpc call id</returns>
    </member>
    <member name="M:NetworkTables.RemoteProcedureCall.CallRpcWithResultAsync(System.String,System.Threading.CancellationToken,System.Collections.Generic.IList{NetworkTables.Value})">
      <summary>
            Calls a procedure on a remote server, and awaits a response asynchronously
            </summary>
      <param name="name">The name of the Rpc</param>
      <param name="token">The token to cancel the response request</param>
      <param name="param">The data to send for the request</param>
      <returns>The results received from the server for the request</returns>
    </member>
    <member name="M:NetworkTables.RemoteProcedureCall.CallRpcWithResultAsync(System.String,System.Threading.CancellationToken,System.Collections.Generic.IList{System.Byte})">
      <summary>
            Calls a procedure on a remote server, and awaits a response asynchronously
            </summary>
      <param name="name">The name of the Rpc</param>
      <param name="token">The token to cancel the response request</param>
      <param name="param">The data to send for the request</param>
      <returns>The results received from the server for the request</returns>
    </member>
    <member name="M:NetworkTables.RemoteProcedureCall.CreatePolledRpc(System.String,NetworkTables.RpcDefinition)">
      <summary>
            Creates an procedure called by a remote client that can be polled by the server
            </summary>
      <param name="name">The name for this Rpc</param>
      <param name="def">The definition for this Rpc</param>
    </member>
    <member name="M:NetworkTables.RemoteProcedureCall.CreatePolledRpc(System.String,System.Collections.Generic.IList{System.Byte})">
      <summary>
            Creates an procedure called by a remote client that can be polled by the server
            </summary>
      <param name="name">The name for this Rpc</param>
      <param name="def">The definition for this Rpc</param>
    </member>
    <member name="M:NetworkTables.RemoteProcedureCall.CreateRpc(System.String,NetworkTables.RpcDefinition,NetworkTables.RpcCallback)">
      <summary>
            Creates an procedure that can be called by a remote client
            </summary>
      <param name="name">The name for this Rpc</param>
      <param name="def">The definition for this Rpc</param>
      <param name="callback">The callback to use the the procedure is called from a remote</param>
    </member>
    <member name="M:NetworkTables.RemoteProcedureCall.CreateRpc(System.String,System.Collections.Generic.IList{System.Byte},NetworkTables.RpcCallback)">
      <summary>
            Creates an procedure that can be called by a remote client
            </summary>
      <param name="name">The name for this Rpc</param>
      <param name="def">The definition for this Rpc</param>
      <param name="callback">The callback to use the the procedure is called from a remote</param>
    </member>
    <member name="M:NetworkTables.RemoteProcedureCall.GetRpcResult(System.Boolean,System.Int64,System.Byte[]@)">
      <summary>
            Gets the result of an Rpc request
            </summary>
      <param name="blocking">True if the call should block until the request is received</param>
      <param name="callUid">The Rpc call id</param>
      <param name="result">Array of results sent back from the server from the request</param>
      <returns>True if a result was received, otherwise false</returns>
    </member>
    <member name="M:NetworkTables.RemoteProcedureCall.GetRpcResult(System.Boolean,System.Int64,System.TimeSpan,System.Byte[]@)">
      <summary>
            Gets the result of an Rpc request
            </summary>
      <param name="blocking">True if the call should block until the request is received</param>
      <param name="callUid">The Rpc call id</param>
      <param name="timeout">Timeout to wait for if blocking</param>
      <param name="result">Array of results sent back from the server from the request</param>
      <returns>True if a result was received, otherwise false</returns>
    </member>
    <member name="M:NetworkTables.RemoteProcedureCall.GetRpcResultAsync(System.Int64,System.Threading.CancellationToken)">
      <summary>
            Gets the result of an Rpc request asynchronously
            </summary>
      <param name="callUid">The Rpc call id</param>
      <param name="token">Token to cancel the request on</param>
      <returns>Array of results sent back from the server from the request</returns>
    </member>
    <member name="M:NetworkTables.RemoteProcedureCall.PackRpcDefinition(NetworkTables.RpcDefinition)">
      <summary>
            Pack an Rpc defintion in to a byte array
            </summary>
      <param name="def">The definition to pack</param>
      <returns>The packed data</returns>
    </member>
    <member name="M:NetworkTables.RemoteProcedureCall.PackRpcValues(System.Collections.Generic.IList{NetworkTables.Value})">
      <summary>
            Pack a list of values
            </summary>
      <param name="values">The values to pack</param>
      <returns>The packed values</returns>
    </member>
    <member name="M:NetworkTables.RemoteProcedureCall.PollRpc(System.Boolean,NetworkTables.RpcCallInfo@)">
      <summary>
            Polls for an Rpc request from a client
            </summary>
      <param name="blocking">True to block waiting for a request</param>
      <param name="callInfo">The info for the call request</param>
      <returns>True if an Rpc call has been requested, otherwise false</returns>
    </member>
    <member name="M:NetworkTables.RemoteProcedureCall.PollRpc(System.Boolean,System.TimeSpan,NetworkTables.RpcCallInfo@)">
      <summary>
            Polls for an Rpc request from a client
            </summary>
      <param name="blocking">True to block waiting for a request</param>
      <param name="timeout">Timeout to wait for if blocking</param>
      <param name="callInfo">The info for the call request</param>
      <returns>True if an Rpc call has been requested, otherwise false</returns>
    </member>
    <member name="M:NetworkTables.RemoteProcedureCall.PollRpcAsync(System.Threading.CancellationToken)">
      <summary>
            Polls for an Rpc request from a client asynchronously
            </summary>
      <param name="token">Token to cancel the polling on</param>
      <returns>The info for the call request, or null if canceled.</returns>
    </member>
    <member name="M:NetworkTables.RemoteProcedureCall.PostRpcResponse(System.Int64,System.Int64,System.Collections.Generic.IList{System.Byte})">
      <summary>
            Posts an Rpc response to a polled Rpc request
            </summary>
      <param name="rpcId">The id of the rpc to respond to</param>
      <param name="callUid">The id of the request to respond to</param>
      <param name="result">The result to send as a response</param>
    </member>
    <member name="M:NetworkTables.RemoteProcedureCall.UnpackRpcDefinition(System.Collections.Generic.IList{System.Byte},NetworkTables.RpcDefinition@)">
      <summary>
            Unpack an Rpc definition from a byte array
            </summary>
      <param name="packed">The data array</param>
      <param name="def">The definition to unpack to</param>
      <returns>True if the data was unpacked successfully</returns>
    </member>
    <member name="M:NetworkTables.RemoteProcedureCall.UnpackRpcValues(System.Collections.Generic.IList{System.Byte},System.Collections.Generic.IList{NetworkTables.NtType})">
      <summary>
            Unpack a list of values
            </summary>
      <param name="packed">The packed data</param>
      <param name="types">The types the packed data should be</param>
      <returns>A list of the unpacked values</returns>
    </member>
    <member name="T:NetworkTables.RpcCallback">
      <summary>
            This delegate is used for Remote Procedure Call callbacks
            </summary>
      <param name="name">The name of the callback</param>
      <param name="param">The binary data of the callback</param>
      <param name="connInfo">The connection info for the requested caller</param>
      <returns>The raw rpc data to send in response</returns>
    </member>
    <member name="T:NetworkTables.RpcCallInfo">
      <summary>
            Call info related to a polled Rpc call
            </summary>
    </member>
    <member name="M:NetworkTables.RpcCallInfo.#ctor(System.Int64,System.Int64,System.String,System.Byte[])">
      <summary>
            Creates a new polled RpcCallInfo def
            </summary>
      <param name="rpcId">The Rpc that is getting polled</param>
      <param name="callUid">The call Id that set this polled value</param>
      <param name="name">The name of this polled call info</param>
      <param name="param">The data associated with this polled info</param>
    </member>
    <member name="P:NetworkTables.RpcCallInfo.CallUid">
      <summary>
            The Id of the Rpc call that set this polled value
            </summary>
    </member>
    <member name="P:NetworkTables.RpcCallInfo.Name">
      <summary>
            The name of this call info
            </summary>
    </member>
    <member name="P:NetworkTables.RpcCallInfo.Params">
      <summary>
            The data from this rpc call
            </summary>
    </member>
    <member name="P:NetworkTables.RpcCallInfo.RpcId">
      <summary>
            The Id of the Rpc being polled
            </summary>
    </member>
    <member name="T:NetworkTables.RpcDefinition">
      <summary>
            Definitions for an Rpc call
            </summary>
    </member>
    <member name="M:NetworkTables.RpcDefinition.#ctor(System.Int32,System.String)">
      <summary>
            Creates a new Rpc defintion without parameters or results
            </summary>
      <param name="version">The version of this definition</param>
      <param name="name">The name of this definition</param>
    </member>
    <member name="M:NetworkTables.RpcDefinition.#ctor(System.Int32,System.String,System.Collections.Generic.List{NetworkTables.RpcParamDef},System.Collections.Generic.List{NetworkTables.RpcResultsDef})">
      <summary>
            Creates a new Rpc definition with parameters and results
            </summary>
      <param name="version">The version of this definition</param>
      <param name="name">The name of this defition</param>
      <param name="param">The parameter definitions for this Rpc definition</param>
      <param name="res">The result definitions for this Rpc definition</param>
    </member>
    <member name="P:NetworkTables.RpcDefinition.Name">
      <summary>
            The name of this Rpc definition
            </summary>
    </member>
    <member name="P:NetworkTables.RpcDefinition.Params">
      <summary>
            The parameters to send over this Rpc definition
            </summary>
    </member>
    <member name="P:NetworkTables.RpcDefinition.Results">
      <summary>
            The results to receive from this Rpc definition
            </summary>
    </member>
    <member name="P:NetworkTables.RpcDefinition.Version">
      <summary>
            The version of this Rpc definition
            </summary>
    </member>
    <member name="T:NetworkTables.RpcParamDef">
      <summary>
            Definitions for an Rpc parameter
            </summary>
    </member>
    <member name="M:NetworkTables.RpcParamDef.#ctor(System.String,NetworkTables.Value)">
      <summary>
            Creates a new Rpc parameter definition
            </summary>
      <param name="name">The name of the parameter</param>
      <param name="def">The value of the parameter</param>
    </member>
    <member name="P:NetworkTables.RpcParamDef.DefValue">
      <summary>
            Gets the value for this parameter
            </summary>
    </member>
    <member name="P:NetworkTables.RpcParamDef.Name">
      <summary>
            Gets the name for this parameter
            </summary>
    </member>
    <member name="T:NetworkTables.RpcResultsDef">
      <summary>
            Defitions for an Rpc result
            </summary>
    </member>
    <member name="M:NetworkTables.RpcResultsDef.#ctor(System.String,NetworkTables.NtType)">
      <summary>
            Create a new Rpc result definition
            </summary>
      <param name="name">The name of the result</param>
      <param name="type">The type of the result</param>
    </member>
    <member name="P:NetworkTables.RpcResultsDef.Name">
      <summary>
            Gets the name for this result
            </summary>
    </member>
    <member name="P:NetworkTables.RpcResultsDef.Type">
      <summary>
            Gets the type this result should be 
            </summary>
    </member>
    <member name="T:NetworkTables.Value">
      <summary>
            This class represents all types allowed by NetworkTables
            </summary>
    </member>
    <member name="M:NetworkTables.Value.#ctor">
      <summary>
            Creates a value with an Unassigned default type
            </summary>
    </member>
    <member name="M:NetworkTables.Value.Equals(System.Object)">
      <summary>Determines whether the specified object is equal to the current object.</summary>
      <param name="obj">The object to compare with the current object. </param>
      <returns>true if the specified object  is equal to the current object; otherwise, false.</returns>
    </member>
    <member name="M:NetworkTables.Value.GetBoolean">
      <summary>
            Gets the boolean value from the type
            </summary>
      <returns>boolean contained in type</returns>
      <exception cref="T:NetworkTables.Exceptions.TableKeyDifferentTypeException">Thrown if
            type is not boolean.</exception>
    </member>
    <member name="M:NetworkTables.Value.GetBooleanArray">
      <summary>
            Gets the boolean array value from the type
            </summary>
      <returns>boolean array contained in type</returns>
      <exception cref="T:NetworkTables.Exceptions.TableKeyDifferentTypeException">Thrown if
            type is not boolean array.</exception>
    </member>
    <member name="M:NetworkTables.Value.GetDouble">
      <summary>
            Gets the double value from the type
            </summary>
      <returns>double contained in type</returns>
      <exception cref="T:NetworkTables.Exceptions.TableKeyDifferentTypeException">Thrown if
            type is not double.</exception>
    </member>
    <member name="M:NetworkTables.Value.GetDoubleArray">
      <summary>
            Gets the double array value from the type
            </summary>
      <returns>double array contained in type</returns>
      <exception cref="T:NetworkTables.Exceptions.TableKeyDifferentTypeException">Thrown if
            type is not double array.</exception>
    </member>
    <member name="M:NetworkTables.Value.GetHashCode">
      <summary>Serves as the default hash function. </summary>
      <returns>A hash code for the current object.</returns>
    </member>
    <member name="M:NetworkTables.Value.GetObjectValue">
      <summary>
            Gets the raw object contained in this value.
            </summary>
      <returns>Object representation of the value</returns>
    </member>
    <member name="M:NetworkTables.Value.GetRaw">
      <summary>
            Gets the raw value from the type
            </summary>
      <returns>raw byte array contained in type</returns>
      <exception cref="T:NetworkTables.Exceptions.TableKeyDifferentTypeException">Thrown if
            type is not raw.</exception>
    </member>
    <member name="M:NetworkTables.Value.GetRpc">
      <summary>
            Gets the rpc value from the type
            </summary>
      <returns>rpc byte array contained in type</returns>
      <exception cref="T:NetworkTables.Exceptions.TableKeyDifferentTypeException">Thrown if
            type is not rpc.</exception>
    </member>
    <member name="M:NetworkTables.Value.GetString">
      <summary>
            Gets the string value from the type
            </summary>
      <returns>string contained in type</returns>
      <exception cref="T:NetworkTables.Exceptions.TableKeyDifferentTypeException">Thrown if
            type is not string.</exception>
    </member>
    <member name="M:NetworkTables.Value.GetStringArray">
      <summary>
            Gets the string array value from the type
            </summary>
      <returns>string array contained in type</returns>
      <exception cref="T:NetworkTables.Exceptions.TableKeyDifferentTypeException">Thrown if
            type is not string arrya.</exception>
    </member>
    <member name="M:NetworkTables.Value.GetSupportedValueTypes">
      <summary>
            Gets a enumerable of all the types supported by the <see cref="T:NetworkTables.Value" /> class.
            </summary>
      <returns>An enumerable of all supported types</returns>
    </member>
    <member name="M:NetworkTables.Value.GetValue``1(System.Boolean@)">
      <summary>
            Gets a copy of the value using a generic parameter.
            </summary>
      <param name="success">True if the type is the value type, otherwise false</param>
      <typeparam name="T">The type of value to return</typeparam>
      <returns>The value contained in this value.</returns>
    </member>
    <member name="M:NetworkTables.Value.IsBoolean">
      <summary>
            Gets if the type is boolean
            </summary>
      <returns>True if the type is boolean</returns>
    </member>
    <member name="M:NetworkTables.Value.IsBooleanArray">
      <summary>
            Gets if the type is boolean array
            </summary>
      <returns>True if the type is a boolean array</returns>
    </member>
    <member name="M:NetworkTables.Value.IsDouble">
      <summary>
            Gets if the type is double
            </summary>
      <returns>True if the type is double</returns>
    </member>
    <member name="M:NetworkTables.Value.IsDoubleArray">
      <summary>
            Gets if the type is double array
            </summary>
      <returns>True if the type is a double array</returns>
    </member>
    <member name="M:NetworkTables.Value.IsRaw">
      <summary>
            Gets if the type is raw
            </summary>
      <returns>True if the type is raw</returns>
    </member>
    <member name="M:NetworkTables.Value.IsRpc">
      <summary>
            Gets if the type is Rpc
            </summary>
      <returns>True if the type is Rpc</returns>
    </member>
    <member name="M:NetworkTables.Value.IsString">
      <summary>
            Gets if the type is string
            </summary>
      <returns>True if the type is string</returns>
    </member>
    <member name="M:NetworkTables.Value.IsStringArray">
      <summary>
            Gets if the type is string array
            </summary>
      <returns>True if the type is a string array</returns>
    </member>
    <member name="P:NetworkTables.Value.LastChange">
      <summary>
            Gets the Timestamp when this value was last changed.
            </summary>
    </member>
    <member name="M:NetworkTables.Value.MakeBoolean(System.Boolean)">
      <summary>
            Makes a boolean <see cref="T:NetworkTables.Value" /></summary>
      <param name="val">The value to set the <see cref="T:NetworkTables.Value" /> to</param>
      <returns>The created <see cref="T:NetworkTables.Value" /></returns>
    </member>
    <member name="M:NetworkTables.Value.MakeBooleanArray(System.Boolean[])">
      <summary>
            Makes a boolean array <see cref="T:NetworkTables.Value" /></summary>
      <param name="val">The value to set the <see cref="T:NetworkTables.Value" /> to</param>
      <returns>The created <see cref="T:NetworkTables.Value" /></returns>
    </member>
    <member name="M:NetworkTables.Value.MakeBooleanArray(System.Collections.Generic.IList{System.Boolean})">
      <summary>
            Makes a boolean array <see cref="T:NetworkTables.Value" /></summary>
      <param name="val">The value to set the <see cref="T:NetworkTables.Value" /> to</param>
      <returns>The created <see cref="T:NetworkTables.Value" /></returns>
    </member>
    <member name="M:NetworkTables.Value.MakeDouble(System.Double)">
      <summary>
            Makes a double <see cref="T:NetworkTables.Value" /></summary>
      <param name="val">The value to set the <see cref="T:NetworkTables.Value" /> to</param>
      <returns>The created <see cref="T:NetworkTables.Value" /></returns>
    </member>
    <member name="M:NetworkTables.Value.MakeDoubleArray(System.Collections.Generic.IList{System.Double})">
      <summary>
            Makes a double array <see cref="T:NetworkTables.Value" /></summary>
      <param name="val">The value to set the <see cref="T:NetworkTables.Value" /> to</param>
      <returns>The created <see cref="T:NetworkTables.Value" /></returns>
    </member>
    <member name="M:NetworkTables.Value.MakeDoubleArray(System.Double[])">
      <summary>
            Makes a double array <see cref="T:NetworkTables.Value" /></summary>
      <param name="val">The value to set the <see cref="T:NetworkTables.Value" /> to</param>
      <returns>The created <see cref="T:NetworkTables.Value" /></returns>
    </member>
    <member name="M:NetworkTables.Value.MakeRaw(System.Byte[])">
      <summary>
            Makes a raw <see cref="T:NetworkTables.Value" /></summary>
      <param name="val">The value to set the <see cref="T:NetworkTables.Value" /> to</param>
      <returns>The created <see cref="T:NetworkTables.Value" /></returns>
    </member>
    <member name="M:NetworkTables.Value.MakeRaw(System.Collections.Generic.IList{System.Byte})">
      <summary>
            Makes a raw <see cref="T:NetworkTables.Value" /></summary>
      <param name="val">The value to set the <see cref="T:NetworkTables.Value" /> to</param>
      <returns>The created <see cref="T:NetworkTables.Value" /></returns>
    </member>
    <member name="M:NetworkTables.Value.MakeRpc(System.Byte[])">
      <summary>
            Makes an Rpc <see cref="T:NetworkTables.Value" /></summary>
      <param name="val">The value to set the <see cref="T:NetworkTables.Value" /> to</param>
      <returns>The created <see cref="T:NetworkTables.Value" /></returns>
    </member>
    <member name="M:NetworkTables.Value.MakeRpc(System.Byte[],System.Int32)">
      <summary>
            Makes an Rpc <see cref="T:NetworkTables.Value" /></summary>
      <param name="val">The value to set the <see cref="T:NetworkTables.Value" /> to</param>
      <param name="size">The size of the array to use for the Rpc</param>
      <returns>The created <see cref="T:NetworkTables.Value" /></returns>
    </member>
    <member name="M:NetworkTables.Value.MakeRpc(System.Collections.Generic.IList{System.Byte})">
      <summary>
            Makes an Rpc <see cref="T:NetworkTables.Value" /></summary>
      <param name="val">The value to set the <see cref="T:NetworkTables.Value" /> to</param>
      <returns>The created <see cref="T:NetworkTables.Value" /></returns>
    </member>
    <member name="M:NetworkTables.Value.MakeRpc(System.Collections.Generic.IList{System.Byte},System.Int32)">
      <summary>
            Makes an Rpc <see cref="T:NetworkTables.Value" /></summary>
      <param name="val">The value to set the <see cref="T:NetworkTables.Value" /> to</param>
      <param name="size">The size of the array to use for the Rpc</param>
      <returns>The created <see cref="T:NetworkTables.Value" /></returns>
    </member>
    <member name="M:NetworkTables.Value.MakeString(System.String)">
      <summary>
            Makes a string <see cref="T:NetworkTables.Value" /></summary>
      <param name="val">The value to set the <see cref="T:NetworkTables.Value" /> to</param>
      <returns>The created <see cref="T:NetworkTables.Value" /></returns>
    </member>
    <member name="M:NetworkTables.Value.MakeStringArray(System.Collections.Generic.IList{System.String})">
      <summary>
            Makes a string array <see cref="T:NetworkTables.Value" /></summary>
      <param name="val">The value to set the <see cref="T:NetworkTables.Value" /> to</param>
      <returns>The created <see cref="T:NetworkTables.Value" /></returns>
    </member>
    <member name="M:NetworkTables.Value.MakeStringArray(System.String[])">
      <summary>
            Makes a string array <see cref="T:NetworkTables.Value" /></summary>
      <param name="val">The value to set the <see cref="T:NetworkTables.Value" /> to</param>
      <returns>The created <see cref="T:NetworkTables.Value" /></returns>
    </member>
    <member name="M:NetworkTables.Value.MakeValue(System.Object)">
      <summary>
            Makes a value from a specific object
            </summary>
      <param name="val">The object ot make the value from</param>
      <returns>The value if valid, otherwise an Empty value</returns>
    </member>
    <member name="M:NetworkTables.Value.op_Equality(NetworkTables.Value,NetworkTables.Value)">
      <summary>
            Checks to see if two <see cref="T:NetworkTables.Value">Values</see> are equal
            </summary>
      <param name="lhs">The left hand <see cref="T:NetworkTables.Value" /></param>
      <param name="rhs">The right hand <see cref="T:NetworkTables.Value" /></param>
      <returns>True if the <see cref="T:NetworkTables.Value">Values</see> are equal</returns>
    </member>
    <member name="M:NetworkTables.Value.op_Inequality(NetworkTables.Value,NetworkTables.Value)">
      <summary>
            Checks to see if two <see cref="T:NetworkTables.Value">Values</see> are not equal
            </summary>
      <param name="lhs">The left hand <see cref="T:NetworkTables.Value" /></param>
      <param name="rhs">The right hand <see cref="T:NetworkTables.Value" /></param>
      <returns>True if the <see cref="T:NetworkTables.Value">Values</see> are not equal</returns>
    </member>
    <member name="M:NetworkTables.Value.ToString">
      <summary>
            Gets a string representation of the backing value
            </summary>
      <returns>String representation of the backing value</returns>
    </member>
    <member name="P:NetworkTables.Value.Type">
      <summary>
            Gets the type of this Value
            </summary>
    </member>
    <member name="T:NetworkTables.Exceptions.PersistentException">
      <summary>
            An exception thrown when the persistent load/save fails in a <see cref="T:NetworkTables.NetworkTable" />.
            </summary>
    </member>
    <member name="M:NetworkTables.Exceptions.PersistentException.#ctor(System.String)">
      <summary>
            Creates a new <see cref="T:NetworkTables.Exceptions.PersistentException" />.
            </summary>
      <param name="message">The error message.</param>
    </member>
    <member name="T:NetworkTables.Exceptions.TableKeyDifferentTypeException">
      <summary>
            An exception thrown when the key has a different type then requested in the <see cref="T:NetworkTables.Tables.ITable" /></summary>
    </member>
    <member name="M:NetworkTables.Exceptions.TableKeyDifferentTypeException.#ctor(NetworkTables.NtType,NetworkTables.NtType)">
      <summary>
            Creates a new <see cref="T:NetworkTables.Exceptions.TableKeyDifferentTypeException" /> during a <see cref="T:NetworkTables.Value" /> error
            </summary>
      <param name="requested">The type requested.</param>
      <param name="typeInTable">The type actually in the value.</param>
    </member>
    <member name="M:NetworkTables.Exceptions.TableKeyDifferentTypeException.#ctor(System.String,NetworkTables.NtType,NetworkTables.NtType)">
      <summary>
            Creates a new <see cref="T:NetworkTables.Exceptions.TableKeyDifferentTypeException" />.
            </summary>
      <param name="key">The table key that was different.</param>
      <param name="requested">The type requested.</param>
      <param name="typeInTable">The type actually in the table.</param>
    </member>
    <member name="P:NetworkTables.Exceptions.TableKeyDifferentTypeException.RequestedKey">
      <summary>
            Gets the key that was requested
            </summary>
    </member>
    <member name="P:NetworkTables.Exceptions.TableKeyDifferentTypeException.RequestedType">
      <summary>
            Gets the type that was requested
            </summary>
    </member>
    <member name="P:NetworkTables.Exceptions.TableKeyDifferentTypeException.ThrownByValueGet">
      <summary>
            Gets if the exception was thrown during a <see cref="T:NetworkTables.Value" /> Get() method.
            </summary>
    </member>
    <member name="P:NetworkTables.Exceptions.TableKeyDifferentTypeException.TypeInTable">
      <summary>
            Gets the type that actually exists in the table or value
            </summary>
    </member>
    <member name="T:NetworkTables.Exceptions.TableKeyNotDefinedException">
      <summary>
            An exception thrown when the lookup of a key-value fails in an <see cref="T:NetworkTables.Tables.ITable" />.
            </summary>
    </member>
    <member name="M:NetworkTables.Exceptions.TableKeyNotDefinedException.#ctor(System.String)">
      <summary>
            Creates a new <see cref="T:NetworkTables.Exceptions.TableKeyNotDefinedException" />.
            </summary>
      <param name="key">The key that was not defined in the table.</param>
    </member>
    <member name="P:NetworkTables.Exceptions.TableKeyNotDefinedException.Key">
      <summary>
            Gets the key that is not defined
            </summary>
    </member>
    <member name="T:NetworkTables.Independent.IndependentNetworkTable">
      <summary>
            This class is the Main Class for interfacing with NetworkTables.
            </summary>
    </member>
    <member name="M:NetworkTables.Independent.IndependentNetworkTable.#ctor(NetworkTables.Independent.IndependentNtCore,System.String)">
      <summary>
            Creates a new NetworkTable object from an NtCore object
            </summary>
      <param name="ntCore">The NtCore object to use</param>
      <param name="path">The root path for this table</param>
    </member>
    <member name="M:NetworkTables.Independent.IndependentNetworkTable.AddConnectionListener(NetworkTables.Tables.IRemoteConnectionListener,System.Boolean)">
      <summary>
            Register an object to listen for connection and disconnection events.
            </summary>
      <param name="listener">The listener to be registered</param>
      <param name="immediateNotify">True if the listener object should be notified of the current
            connection state immediately.</param>
    </member>
    <member name="M:NetworkTables.Independent.IndependentNetworkTable.AddConnectionListener(System.Action{NetworkTables.Tables.IRemote,NetworkTables.ConnectionInfo,System.Boolean},System.Boolean)">
      <summary>
            Register a delegate to listen for connection and disconnection events.
            </summary>
      <param name="listener">The listener to be registered.</param>
      <param name="immediateNotify">True if the listener object should be notified of the current
            connection state immediately.</param>
    </member>
    <member name="M:NetworkTables.Independent.IndependentNetworkTable.AddSubTableListener(NetworkTables.Tables.ITableListener)">
      <summary>
            Adds a SubTable Listener with the default flags, and without local notify.
            </summary>
      <param name="listener">The <see cref="T:NetworkTables.Tables.ITableListener" /> to add.</param>
    </member>
    <member name="M:NetworkTables.Independent.IndependentNetworkTable.AddSubTableListener(NetworkTables.Tables.ITableListener,System.Boolean)">
      <summary>
            Adds a SubTable Listener.
            </summary>
      <param name="listener">The <see cref="T:NetworkTables.Tables.ITableListener" /> to add.</param>
      <param name="localNotify">True if we want to notify local and remote listeners,
            otherwise just notify remote listeners.</param>
    </member>
    <member name="M:NetworkTables.Independent.IndependentNetworkTable.AddSubTableListener(System.Action{NetworkTables.Tables.ITable,System.String,NetworkTables.Value,NetworkTables.NotifyFlags})">
      <summary>
            Adds a SubTable Listener with the default flags, and without local notify.
            </summary>
      <param name="listenerDelegate">The Table Listener Delegate to add.</param>
    </member>
    <member name="M:NetworkTables.Independent.IndependentNetworkTable.AddSubTableListener(System.Action{NetworkTables.Tables.ITable,System.String,NetworkTables.Value,NetworkTables.NotifyFlags},System.Boolean)">
      <summary>
            Adds a SubTable Listener.
            </summary>
      <param name="listenerDelegate">The Table Listener Delegate to add.</param>
      <param name="localNotify">True if we want to notify local and remote listeners,
            otherwise just notify remote listeners.</param>
    </member>
    <member name="M:NetworkTables.Independent.IndependentNetworkTable.AddTableListener(NetworkTables.Tables.ITableListener,System.Boolean)">
      <summary>
            Add a listener to changes to the table.
            </summary>
      <param name="listener">The listener to add</param>
      <param name="immediateNotify">If true then this listener will be notified of all current entries (marked as new)</param>
    </member>
    <member name="M:NetworkTables.Independent.IndependentNetworkTable.AddTableListener(System.Action{NetworkTables.Tables.ITable,System.String,NetworkTables.Value,NetworkTables.NotifyFlags},System.Boolean)">
      <summary>
            Add a listener to changes to the table.
            </summary>
      <param name="listenerDelegate">The Table Listener Delegate to add.</param>
      <param name="immediateNotify">If true then this listener will be notified of all current entries (marked as new)</param>
    </member>
    <member name="M:NetworkTables.Independent.IndependentNetworkTable.AddTableListener(System.String,NetworkTables.Tables.ITableListener,System.Boolean)">
      <summary>
            Add a listener for changes to a specific key in the table.
            </summary>
      <param name="key">The key to listen for</param>
      <param name="listener">The listener to add</param>
      <param name="immediateNotify">If true then this listener will be notified of all current entries (marked as new)</param>
    </member>
    <member name="M:NetworkTables.Independent.IndependentNetworkTable.AddTableListener(System.String,System.Action{NetworkTables.Tables.ITable,System.String,NetworkTables.Value,NetworkTables.NotifyFlags},System.Boolean)">
      <summary>
            Add a listener for changes to a specific key in the table.
            </summary>
      <param name="key">The key to listen for</param>
      <param name="listenerDelegate">The Table Listener Delegate to add.</param>
      <param name="immediateNotify">If true then this listener will be notified of all current entries (marked as new)</param>
    </member>
    <member name="M:NetworkTables.Independent.IndependentNetworkTable.AddTableListenerEx(NetworkTables.Tables.ITableListener,NetworkTables.NotifyFlags)">
      <summary>
            Add a listener to changes to the table.
            </summary>
      <param name="listener">The listener to add</param>
      <param name="flags">The <see cref="T:NetworkTables.EntryFlags" /> flags to use for the listener</param>
    </member>
    <member name="M:NetworkTables.Independent.IndependentNetworkTable.AddTableListenerEx(System.Action{NetworkTables.Tables.ITable,System.String,NetworkTables.Value,NetworkTables.NotifyFlags},NetworkTables.NotifyFlags)">
      <summary>
            Add a listener to changes to the table.
            </summary>
      <param name="listenerDelegate">The Table Listener Delegate to add.</param>
      <param name="flags">The <see cref="T:NetworkTables.EntryFlags" /> flags to use for the listener</param>
    </member>
    <member name="M:NetworkTables.Independent.IndependentNetworkTable.AddTableListenerEx(System.String,NetworkTables.Tables.ITableListener,NetworkTables.NotifyFlags)">
      <summary>
            Add a listener for changes to a specific key in the table.
            </summary>
      <param name="key">The key to listen for</param>
      <param name="listener">The listener to add</param>
      <param name="flags">The <see cref="T:NetworkTables.EntryFlags" /> flags to use for the listener</param>
    </member>
    <member name="M:NetworkTables.Independent.IndependentNetworkTable.AddTableListenerEx(System.String,System.Action{NetworkTables.Tables.ITable,System.String,NetworkTables.Value,NetworkTables.NotifyFlags},NetworkTables.NotifyFlags)">
      <summary>
            Add a listener for changes to a specific key in the table.
            </summary>
      <param name="key">The key to listen for</param>
      <param name="listenerDelegate">The Table Listener Delegate to add.</param>
      <param name="flags">The <see cref="T:NetworkTables.EntryFlags" /> flags to use for the listener</param>
    </member>
    <member name="M:NetworkTables.Independent.IndependentNetworkTable.ClearFlags(System.String,NetworkTables.EntryFlags)">
      <summary>
            Clears flags on the specified key in this table.
            </summary>
      <param name="key">The key name.</param>
      <param name="flags">The flags to clear. (Bitmask)</param>
    </member>
    <member name="M:NetworkTables.Independent.IndependentNetworkTable.ClearPersistent(System.String)">
      <summary>
            Stop making a key's value persistent through program restarts.
            </summary>
      <param name="key">The key name (cannot be null).</param>
    </member>
    <member name="M:NetworkTables.Independent.IndependentNetworkTable.ContainsKey(System.String)">
      <summary>
            Checkts the table and tells if it contains the specified key.
            </summary>
      <param name="key">The key to be checked.</param>
      <returns>True if the table contains the key, otherwise false.</returns>
    </member>
    <member name="M:NetworkTables.Independent.IndependentNetworkTable.ContainsSubTable(System.String)">
      <summary>
            Checks the table and tells if if contains the specified sub-table.
            </summary>
      <param name="key">The sub-table to check for</param>
      <returns>True if the table contains the sub-table, otherwise false</returns>
    </member>
    <member name="M:NetworkTables.Independent.IndependentNetworkTable.Delete(System.String)">
      <summary>
            Deletes the specifed key in this table.
            </summary>
      <param name="key">The key name.</param>
    </member>
    <member name="M:NetworkTables.Independent.IndependentNetworkTable.Flush">
      <summary>
            Flushes all updated values immediately to the network.
            </summary>
    </member>
    <member name="M:NetworkTables.Independent.IndependentNetworkTable.GetBoolean(System.String)">
      <summary>
            Returns the value that the key maps to.
            </summary>
      <param name="key">The key name.</param>
      <returns>The requested value.</returns>
      <exception cref="T:NetworkTables.Exceptions.TableKeyNotDefinedException">Thrown if the key does not 
            exist in the table, or if the key is null.</exception>
      <exception cref="T:NetworkTables.Exceptions.TableKeyDifferentTypeException">Thrown if the key exists
            as a different type in the table.</exception>
    </member>
    <member name="M:NetworkTables.Independent.IndependentNetworkTable.GetBoolean(System.String,System.Boolean)">
      <summary>
            Returns the value that the key maps to.
            </summary>
      <param name="key">The key name.</param>
      <param name="defaultValue">The default value if the key does not exist or is null</param>
      <returns>The value requested, or defaultValue if the key does not exist or is null.</returns>
    </member>
    <member name="M:NetworkTables.Independent.IndependentNetworkTable.GetBooleanArray(System.String)">
      <summary>
            Returns the value array that the key maps to.
            </summary>
      <param name="key">The key name.</param>
      <returns>The requested value array.</returns>
      <exception cref="T:NetworkTables.Exceptions.TableKeyNotDefinedException">Thrown if the key does not 
            exist in the table, or if the key is null.</exception>
      <exception cref="T:NetworkTables.Exceptions.TableKeyDifferentTypeException">Thrown if the key exists
            as a different type in the table.</exception>
    </member>
    <member name="M:NetworkTables.Independent.IndependentNetworkTable.GetBooleanArray(System.String,System.Boolean[])">
      <summary>
            Returns the value array that the key maps to.
            </summary>
      <param name="key">The key name.</param>
      <param name="defaultValue">The default value if the key does not exist or is null</param>
      <returns>The value array requested, or defaultValue if the key does not exist or is null.</returns>
    </member>
    <member name="M:NetworkTables.Independent.IndependentNetworkTable.GetFlags(System.String)">
      <summary>
            Returns the flags for the specified key.
            </summary>
      <param name="key">The key name.</param>
      <returns>The flags attached to the key.</returns>
    </member>
    <member name="M:NetworkTables.Independent.IndependentNetworkTable.GetKeys">
      <summary>
            Gets a set of all the keys contained in the table.
            </summary>
      <returns>A set of all keys currently in the table.</returns>
    </member>
    <member name="M:NetworkTables.Independent.IndependentNetworkTable.GetKeys(NetworkTables.NtType)">
      <summary>
            Gets a set of all the keys contained in the table with the specified type.
            </summary>
      <param name="types">Bitmask of types to check for; 0 is treated as a "don't care".</param>
      <returns>A set of all keys currently in the table.</returns>
    </member>
    <member name="M:NetworkTables.Independent.IndependentNetworkTable.GetNumber(System.String)">
      <summary>
            Returns the value that the key maps to.
            </summary>
      <param name="key">The key name.</param>
      <returns>The requested value.</returns>
      <exception cref="T:NetworkTables.Exceptions.TableKeyNotDefinedException">Thrown if the key does not 
            exist in the table, or if the key is null.</exception>
      <exception cref="T:NetworkTables.Exceptions.TableKeyDifferentTypeException">Thrown if the key exists
            as a different type in the table.</exception>
    </member>
    <member name="M:NetworkTables.Independent.IndependentNetworkTable.GetNumber(System.String,System.Double)">
      <summary>
            Returns the value that the key maps to.
            </summary>
      <param name="key">The key name.</param>
      <param name="defaultValue">The default value if the key does not exist or is null</param>
      <returns>The value requested, or defaultValue if the key does not exist or is null.</returns>
    </member>
    <member name="M:NetworkTables.Independent.IndependentNetworkTable.GetNumberArray(System.String)">
      <summary>
            Returns the value array that the key maps to.
            </summary>
      <param name="key">The key name.</param>
      <returns>The requested value array.</returns>
      <exception cref="T:NetworkTables.Exceptions.TableKeyNotDefinedException">Thrown if the key does not 
            exist in the table, or if the key is null.</exception>
      <exception cref="T:NetworkTables.Exceptions.TableKeyDifferentTypeException">Thrown if the key exists
            as a different type in the table.</exception>
    </member>
    <member name="M:NetworkTables.Independent.IndependentNetworkTable.GetNumberArray(System.String,System.Double[])">
      <summary>
            Returns the value array that the key maps to.
            </summary>
      <param name="key">The key name.</param>
      <param name="defaultValue">The default value if the key does not exist or is null</param>
      <returns>The value array requested, or defaultValue if the key does not exist or is null.</returns>
    </member>
    <member name="M:NetworkTables.Independent.IndependentNetworkTable.GetRaw(System.String)">
      <summary>
            Returns the value array that the key maps to.
            </summary>
      <param name="key">The key name.</param>
      <returns>The requested value array.</returns>
      <exception cref="T:NetworkTables.Exceptions.TableKeyNotDefinedException">Thrown if the key does not 
            exist in the table, or if the key is null.</exception>
      <exception cref="T:NetworkTables.Exceptions.TableKeyDifferentTypeException">Thrown if the key exists
            as a different type in the table.</exception>
    </member>
    <member name="M:NetworkTables.Independent.IndependentNetworkTable.GetRaw(System.String,System.Byte[])">
      <summary>
            Returns the value array that the key maps to.
            </summary>
      <param name="key">The key name.</param>
      <param name="defaultValue">The default value if the key does not exist or is null</param>
      <returns>The value array requested, or defaultValue if the key does not exist or is null.</returns>
    </member>
    <member name="M:NetworkTables.Independent.IndependentNetworkTable.GetString(System.String)">
      <summary>
            Returns the value that the key maps to.
            </summary>
      <param name="key">The key name.</param>
      <returns>The requested value.</returns>
      <exception cref="T:NetworkTables.Exceptions.TableKeyNotDefinedException">Thrown if the key does not 
            exist in the table, or if the key is null.</exception>
      <exception cref="T:NetworkTables.Exceptions.TableKeyDifferentTypeException">Thrown if the key exists
            as a different type in the table.</exception>
    </member>
    <member name="M:NetworkTables.Independent.IndependentNetworkTable.GetString(System.String,System.String)">
      <summary>
            Returns the value that the key maps to.
            </summary>
      <param name="key">The key name.</param>
      <param name="defaultValue">The default value if the key does not exist or is null</param>
      <returns>The value requested, or defaultValue if the key does not exist or is null.</returns>
    </member>
    <member name="M:NetworkTables.Independent.IndependentNetworkTable.GetStringArray(System.String)">
      <summary>
            Returns the value array that the key maps to.
            </summary>
      <param name="key">The key name.</param>
      <returns>The requested value array.</returns>
      <exception cref="T:NetworkTables.Exceptions.TableKeyNotDefinedException">Thrown if the key does not 
            exist in the table, or if the key is null.</exception>
      <exception cref="T:NetworkTables.Exceptions.TableKeyDifferentTypeException">Thrown if the key exists
            as a different type in the table.</exception>
    </member>
    <member name="M:NetworkTables.Independent.IndependentNetworkTable.GetStringArray(System.String,System.String[])">
      <summary>
            Returns the value array that the key maps to.
            </summary>
      <param name="key">The key name.</param>
      <param name="defaultValue">The default value if the key does not exist or is null</param>
      <returns>The value array requested, or defaultValue if the key does not exist or is null.</returns>
    </member>
    <member name="M:NetworkTables.Independent.IndependentNetworkTable.GetSubTable(System.String)">
      <summary>
            Returns the <see cref="T:NetworkTables.Tables.ITable" /> at the specified key. If there is no 
            table at the specified key, it will create a new table.
            </summary>
      <param name="key">The key name.</param>
      <returns>The <see cref="T:NetworkTables.Tables.ITable" /> to be returned.</returns>
    </member>
    <member name="M:NetworkTables.Independent.IndependentNetworkTable.GetSubTables">
      <summary>
            Gets a set of all the sub-tables contained in the table.
            </summary>
      <returns>A set of all subtables currently contained in the table.</returns>
    </member>
    <member name="M:NetworkTables.Independent.IndependentNetworkTable.GetValue(System.String)">
      <summary>
            Returns the value that the key maps to.
            </summary>
      <param name="key">The key name.</param>
      <returns>The requested value.</returns>
      <exception cref="T:NetworkTables.Exceptions.TableKeyNotDefinedException">Thrown if the key does not 
            exist in the table, or if the key is null.</exception>
      <exception cref="T:NetworkTables.Exceptions.TableKeyDifferentTypeException">Thrown if the key exists
            as a different type in the table.</exception>
    </member>
    <member name="M:NetworkTables.Independent.IndependentNetworkTable.GetValue(System.String,NetworkTables.Value)">
      <summary>
            Returns the value that the key maps to.
            </summary>
      <param name="key">The key name.</param>
      <param name="defaultValue">The default value if the key does not exist or is null</param>
      <returns>The value requested, or defaultValue if the key does not exist or is null.</returns>
    </member>
    <member name="P:NetworkTables.Independent.IndependentNetworkTable.IsConnected">
      <summary>
            Gets if the NetworkTables is connected to a client or server.
            </summary>
    </member>
    <member name="M:NetworkTables.Independent.IndependentNetworkTable.IsPersistent(System.String)">
      <summary>
            Returns whether a value is persistent through program restarts.
            </summary>
      <param name="key">The key name (cannot be null).</param>
      <returns>True if the value is persistent.</returns>
    </member>
    <member name="P:NetworkTables.Independent.IndependentNetworkTable.IsServer">
      <summary>
            Gets if the object is a server.
            </summary>
    </member>
    <member name="M:NetworkTables.Independent.IndependentNetworkTable.LoadPersistent(System.String)">
      <summary>
            Loads persistent keys from a file. The server does this automatically.
            </summary>
      <param name="filename">The file name.</param>
      <returns>A List of warnings (errors result in an exception instead.)</returns>
      <exception cref="T:NetworkTables.Exceptions.PersistentException">Thrown if there is an error
            loading the file.</exception>
    </member>
    <member name="F:NetworkTables.Independent.IndependentNetworkTable.PathSeperatorChar">
      <summary>The character used to seperate tables and keys.</summary>
    </member>
    <member name="M:NetworkTables.Independent.IndependentNetworkTable.PutBoolean(System.String,System.Boolean)">
      <summary>
            Maps the specified key to the specified value in the table. 
            </summary>
      <param name="key">The key to map the value to.</param>
      <param name="value">The value to set.</param>
      <returns>True if the key was set properly, otherwise false</returns>
    </member>
    <member name="M:NetworkTables.Independent.IndependentNetworkTable.PutBooleanArray(System.String,System.Collections.Generic.IList{System.Boolean})">
      <summary>
            Maps the specified key to the specified array of values in the table. 
            </summary>
      <param name="key">The key to map the value to.</param>
      <param name="value">The value to set.</param>
      <returns>True if the key was set properly, otherwise false</returns>
    </member>
    <member name="M:NetworkTables.Independent.IndependentNetworkTable.PutNumber(System.String,System.Double)">
      <summary>
            Maps the specified key to the specified value in the table. 
            </summary>
      <param name="key">The key to map the value to.</param>
      <param name="value">The value to set.</param>
      <returns>True if the key was set properly, otherwise false</returns>
    </member>
    <member name="M:NetworkTables.Independent.IndependentNetworkTable.PutNumberArray(System.String,System.Collections.Generic.IList{System.Double})">
      <summary>
            Maps the specified key to the specified array of values in the table. 
            </summary>
      <param name="key">The key to map the value to.</param>
      <param name="value">The value to set.</param>
      <returns>True if the key was set properly, otherwise false</returns>
    </member>
    <member name="M:NetworkTables.Independent.IndependentNetworkTable.PutRaw(System.String,System.Collections.Generic.IList{System.Byte})">
      <summary>
            Put a raw value (byte array) in the table.
            </summary>
      <param name="key">The key to be assigned to.</param>
      <param name="value">The value that will be assigned.</param>
      <returns>False if the table key already exists with a different type.</returns>
    </member>
    <member name="M:NetworkTables.Independent.IndependentNetworkTable.PutString(System.String,System.String)">
      <summary>
            Maps the specified key to the specified value in the table. 
            </summary>
      <param name="key">The key to map the value to.</param>
      <param name="value">The value to set.</param>
      <returns>True if the key was set properly, otherwise false</returns>
    </member>
    <member name="M:NetworkTables.Independent.IndependentNetworkTable.PutStringArray(System.String,System.Collections.Generic.IList{System.String})">
      <summary>
            Maps the specified key to the specified array of values in the table. 
            </summary>
      <param name="key">The key to map the value to.</param>
      <param name="value">The value to set.</param>
      <returns>True if the key was set properly, otherwise false</returns>
    </member>
    <member name="M:NetworkTables.Independent.IndependentNetworkTable.PutValue(System.String,NetworkTables.Value)">
      <summary>
            Maps the specified key to the specified value in the table. 
            </summary>
      <param name="key">The key to map the value to.</param>
      <param name="value">The value to set.</param>
      <returns>True if the key was set properly, otherwise false</returns>
      <exception cref="T:System.ArgumentException">Thrown if the value is not a type supported
            by the table.</exception>
    </member>
    <member name="M:NetworkTables.Independent.IndependentNetworkTable.RemoveConnectionListener(NetworkTables.Tables.IRemoteConnectionListener)">
      <summary>
            Unregister a listener from connection events.
            </summary>
      <param name="listener">The listener to be unregistered.</param>
    </member>
    <member name="M:NetworkTables.Independent.IndependentNetworkTable.RemoveConnectionListener(System.Action{NetworkTables.Tables.IRemote,NetworkTables.ConnectionInfo,System.Boolean})">
      <summary>
            Unregister a listener delegate from connection events.
            </summary>
      <param name="listener">The listener to be unregistered.</param>
    </member>
    <member name="M:NetworkTables.Independent.IndependentNetworkTable.RemoveTableListener(NetworkTables.Tables.ITableListener)">
      <summary>
            Remove a listener from receiving table events.
            </summary>
      <param name="listener">The listener to be removed.</param>
    </member>
    <member name="M:NetworkTables.Independent.IndependentNetworkTable.RemoveTableListener(System.Action{NetworkTables.Tables.ITable,System.String,NetworkTables.Value,NetworkTables.NotifyFlags})">
      <summary>
            Remove a listener from receiving table events.
            </summary>
      <param name="listenerDelegate">The Table Listener Delegate to remove.</param>
    </member>
    <member name="M:NetworkTables.Independent.IndependentNetworkTable.SavePersistent(System.String)">
      <summary>
            Saves persistent keys to a file. The server does this automatically.
            </summary>
      <param name="filename">The file name.</param>
      <exception cref="T:NetworkTables.Exceptions.PersistentException">Thrown if there is an error
            saving the file.</exception>
    </member>
    <member name="M:NetworkTables.Independent.IndependentNetworkTable.SetDefaultBoolean(System.String,System.Boolean)">
      <summary>
            Sets the value in the table at the specified key if it does not exist.
            </summary>
      <param name="key">The key to set</param>
      <param name="defaultValue">The value to set if the key does not exits</param>
      <returns>False if the key exists with a different type, otherwise true</returns>
    </member>
    <member name="M:NetworkTables.Independent.IndependentNetworkTable.SetDefaultBooleanArray(System.String,System.Collections.Generic.IList{System.Boolean})">
      <summary>
            Sets the value in the table at the specified key if it does not exist.
            </summary>
      <param name="key">The key to set</param>
      <param name="defaultValue">The value to set if the key does not exits</param>
      <returns>False if the key exists with a different type, otherwise true</returns>
    </member>
    <member name="M:NetworkTables.Independent.IndependentNetworkTable.SetDefaultNumber(System.String,System.Double)">
      <summary>
            Sets the value in the table at the specified key if it does not exist.
            </summary>
      <param name="key">The key to set</param>
      <param name="defaultValue">The value to set if the key does not exits</param>
      <returns>False if the key exists with a different type, otherwise true</returns>
    </member>
    <member name="M:NetworkTables.Independent.IndependentNetworkTable.SetDefaultNumberArray(System.String,System.Collections.Generic.IList{System.Double})">
      <summary>
            Sets the value in the table at the specified key if it does not exist.
            </summary>
      <param name="key">The key to set</param>
      <param name="defaultValue">The value to set if the key does not exits</param>
      <returns>False if the key exists with a different type, otherwise true</returns>
    </member>
    <member name="M:NetworkTables.Independent.IndependentNetworkTable.SetDefaultRaw(System.String,System.Collections.Generic.IList{System.Byte})">
      <summary>
            Sets the value in the table at the specified key if it does not exist.
            </summary>
      <param name="key">The key to set</param>
      <param name="defaultValue">The value to set if the key does not exits</param>
      <returns>False if the key exists with a different type, otherwise true</returns>
    </member>
    <member name="M:NetworkTables.Independent.IndependentNetworkTable.SetDefaultString(System.String,System.String)">
      <summary>
            Sets the value in the table at the specified key if it does not exist.
            </summary>
      <param name="key">The key to set</param>
      <param name="defaultValue">The value to set if the key does not exits</param>
      <returns>False if the key exists with a different type, otherwise true</returns>
    </member>
    <member name="M:NetworkTables.Independent.IndependentNetworkTable.SetDefaultStringArray(System.String,System.Collections.Generic.IList{System.String})">
      <summary>
            Sets the value in the table at the specified key if it does not exist.
            </summary>
      <param name="key">The key to set</param>
      <param name="defaultValue">The value to set if the key does not exits</param>
      <returns>False if the key exists with a different type, otherwise true</returns>
    </member>
    <member name="M:NetworkTables.Independent.IndependentNetworkTable.SetDefaultValue(System.String,NetworkTables.Value)">
      <summary>
            Sets the value in the table at the specified key if it does not exist.
            </summary>
      <param name="key">The key to set</param>
      <param name="defaultValue">The value to set if the key does not exits</param>
      <returns>False if the key exists with a different type, otherwise true</returns>
    </member>
    <member name="M:NetworkTables.Independent.IndependentNetworkTable.SetFlags(System.String,NetworkTables.EntryFlags)">
      <summary>
            Sets flags on the specified key in this table.
            </summary>
      <param name="key">The key name.</param>
      <param name="flags">The flags to set. (Bitmask)</param>
    </member>
    <member name="M:NetworkTables.Independent.IndependentNetworkTable.SetPersistent(System.String)">
      <summary>
            Makes a key's value persistent through program restarts.
            </summary>
      <param name="key">The key name (cannot be null).</param>
    </member>
    <member name="M:NetworkTables.Independent.IndependentNetworkTable.ToString">
      <summary>Returns a string that represents the current object.</summary>
      <returns>A string that represents the current object.</returns>
    </member>
    <member name="T:NetworkTables.Independent.IndependentNtCore">
      <summary>
            This class contains all NtCore methods exposed by the underlying library, running in an independent state
            </summary>
    </member>
    <member name="M:NetworkTables.Independent.IndependentNtCore.#ctor">
      <summary>
            Creates a new NtCore object to run independently of all other NtCore objects
            </summary>
    </member>
    <member name="M:NetworkTables.Independent.IndependentNtCore.AddConnectionListener(NetworkTables.ConnectionListenerCallback,System.Boolean)">
      <summary>
            Adds a connection listener to the table
            </summary>
      <param name="callback">The callback to call when a new remote connects or disconnects</param>
      <param name="immediateNotify">True to notify immediately with all connected remotes</param>
      <returns>The id of the connection listener</returns>
    </member>
    <member name="M:NetworkTables.Independent.IndependentNtCore.AddEntryListener(System.String,NetworkTables.EntryListenerCallback,NetworkTables.NotifyFlags)">
      <summary>
            Adds a listener for a specified prefix in the table
            </summary>
      <param name="prefix">The prefix to listen for in the table</param>
      <param name="callback">The callback to call when any entry with the specified prefix is updated</param>
      <param name="flags">The flags to use for notifying</param>
      <returns>The id of the entry listener</returns>
    </member>
    <member name="P:NetworkTables.Independent.IndependentNtCore.Client">
      <summary>
            Gets if this table is a client
            </summary>
    </member>
    <member name="M:NetworkTables.Independent.IndependentNtCore.ContainsEntry(System.String)">
      <summary>
            Gets if the table contains a specific entry
            </summary>
      <param name="name">The entry name</param>
      <returns>True if the entry exists, otherwise false</returns>
    </member>
    <member name="F:NetworkTables.Independent.IndependentNtCore.DefaultPort">
      <summary>The default port NetworkTables listens on.</summary>
    </member>
    <member name="M:NetworkTables.Independent.IndependentNtCore.DeleteAllEntries">
      <summary>
            Deletes all non-persistent entries from the table
             </summary>
    </member>
    <member name="M:NetworkTables.Independent.IndependentNtCore.DeleteEntry(System.String)">
      <summary>
            Deletes an entry from the table
            </summary>
      <param name="name">The entry name</param>
    </member>
    <member name="M:NetworkTables.Independent.IndependentNtCore.Dispose">
      <summary>Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.</summary>
    </member>
    <member name="M:NetworkTables.Independent.IndependentNtCore.Flush">
      <summary>
            Forces an immediate update of all entry changes to the network
            </summary>
    </member>
    <member name="M:NetworkTables.Independent.IndependentNtCore.GetConnections">
      <summary>
            Gets an array of all the connections in the table.
            </summary>
      <returns>The table's remote connections</returns>
    </member>
    <member name="M:NetworkTables.Independent.IndependentNtCore.GetEntryBoolean(System.String)">
      <summary>
            Gets an entry value
            </summary>
      <param name="name">The entry name</param>
      <returns>The value in the table</returns>
      <exception cref="T:NetworkTables.Exceptions.TableKeyNotDefinedException">Thrown if the key does
            not exist in the table</exception>
      <exception cref="T:NetworkTables.Exceptions.TableKeyDifferentTypeException">Thrown if the type
            requested does not match the type in the table</exception>
    </member>
    <member name="M:NetworkTables.Independent.IndependentNtCore.GetEntryBoolean(System.String,System.Boolean)">
      <summary>
            Gets an entry value
            </summary>
      <param name="name">The entry name</param>
      <param name="defaultValue">The default value if the key does not exist or is the wrong typel</param>
      <returns>The value requested, or defaultValue if the key does not exist or is the wrong type</returns>
    </member>
    <member name="M:NetworkTables.Independent.IndependentNtCore.GetEntryBooleanArray(System.String)">
      <summary>
            Gets an entry value
            </summary>
      <param name="name">The entry name</param>
      <returns>The value in the table</returns>
      <exception cref="T:NetworkTables.Exceptions.TableKeyNotDefinedException">Thrown if the key does
            not exist in the table</exception>
      <exception cref="T:NetworkTables.Exceptions.TableKeyDifferentTypeException">Thrown if the type
            requested does not match the type in the table</exception>
    </member>
    <member name="M:NetworkTables.Independent.IndependentNtCore.GetEntryBooleanArray(System.String,System.Boolean[])">
      <summary>
            Gets an entry value
            </summary>
      <param name="name">The entry name</param>
      <param name="defaultValue">The default value if the key does not exist or is the wrong typel</param>
      <returns>The value requested, or defaultValue if the key does not exist or is the wrong type</returns>
    </member>
    <member name="M:NetworkTables.Independent.IndependentNtCore.GetEntryDouble(System.String)">
      <summary>
            Gets an entry value
            </summary>
      <param name="name">The entry name</param>
      <returns>The value in the table</returns>
      <exception cref="T:NetworkTables.Exceptions.TableKeyNotDefinedException">Thrown if the key does
            not exist in the table</exception>
      <exception cref="T:NetworkTables.Exceptions.TableKeyDifferentTypeException">Thrown if the type
            requested does not match the type in the table</exception>
    </member>
    <member name="M:NetworkTables.Independent.IndependentNtCore.GetEntryDouble(System.String,System.Double)">
      <summary>
            Gets an entry value
            </summary>
      <param name="name">The entry name</param>
      <param name="defaultValue">The default value if the key does not exist or is the wrong typel</param>
      <returns>The value requested, or defaultValue if the key does not exist or is the wrong type</returns>
    </member>
    <member name="M:NetworkTables.Independent.IndependentNtCore.GetEntryDoubleArray(System.String)">
      <summary>
            Gets an entry value
            </summary>
      <param name="name">The entry name</param>
      <returns>The value in the table</returns>
      <exception cref="T:NetworkTables.Exceptions.TableKeyNotDefinedException">Thrown if the key does
            not exist in the table</exception>
      <exception cref="T:NetworkTables.Exceptions.TableKeyDifferentTypeException">Thrown if the type
            requested does not match the type in the table</exception>
    </member>
    <member name="M:NetworkTables.Independent.IndependentNtCore.GetEntryDoubleArray(System.String,System.Double[])">
      <summary>
            Gets an entry value
            </summary>
      <param name="name">The entry name</param>
      <param name="defaultValue">The default value if the key does not exist or is the wrong typel</param>
      <returns>The value requested, or defaultValue if the key does not exist or is the wrong type</returns>
    </member>
    <member name="M:NetworkTables.Independent.IndependentNtCore.GetEntryFlags(System.String)">
      <summary>
            Gets flags associated with an entry
            </summary>
      <param name="name">The entry names</param>
      <returns>Bitmask of the flags contained in the entry</returns>
    </member>
    <member name="M:NetworkTables.Independent.IndependentNtCore.GetEntryInfo(System.String,NetworkTables.NtType)">
      <summary>
            Gets an array of entry information
            </summary>
      <param name="prefix">A required entry prefix. Only entries with this prefix will be returned</param>
      <param name="types">Bitmask of <see cref="T:NetworkTables.NtType" /> values, 0 is "don't care"</param>
      <returns>Array of entry information</returns>
    </member>
    <member name="M:NetworkTables.Independent.IndependentNtCore.GetEntryRaw(System.String)">
      <summary>
            Gets an entry value
            </summary>
      <param name="name">The entry name</param>
      <returns>The value in the table</returns>
      <exception cref="T:NetworkTables.Exceptions.TableKeyNotDefinedException">Thrown if the key does
            not exist in the table</exception>
      <exception cref="T:NetworkTables.Exceptions.TableKeyDifferentTypeException">Thrown if the type
            requested does not match the type in the table</exception>
    </member>
    <member name="M:NetworkTables.Independent.IndependentNtCore.GetEntryRaw(System.String,System.Byte[])">
      <summary>
            Gets an entry value
            </summary>
      <param name="name">The entry name</param>
      <param name="defaultValue">The default value if the key does not exist or is the wrong typel</param>
      <returns>The value requested, or defaultValue if the key does not exist or is the wrong type</returns>
    </member>
    <member name="M:NetworkTables.Independent.IndependentNtCore.GetEntryString(System.String)">
      <summary>
            Gets an entry value
            </summary>
      <param name="name">The entry name</param>
      <returns>The value in the table</returns>
      <exception cref="T:NetworkTables.Exceptions.TableKeyNotDefinedException">Thrown if the key does
            not exist in the table</exception>
      <exception cref="T:NetworkTables.Exceptions.TableKeyDifferentTypeException">Thrown if the type
            requested does not match the type in the table</exception>
    </member>
    <member name="M:NetworkTables.Independent.IndependentNtCore.GetEntryString(System.String,System.String)">
      <summary>
            Gets an entry value
            </summary>
      <param name="name">The entry name</param>
      <param name="defaultValue">The default value if the key does not exist or is the wrong typel</param>
      <returns>The value requested, or defaultValue if the key does not exist or is the wrong type</returns>
    </member>
    <member name="M:NetworkTables.Independent.IndependentNtCore.GetEntryStringArray(System.String)">
      <summary>
            Gets an entry value
            </summary>
      <param name="name">The entry name</param>
      <returns>The value in the table</returns>
      <exception cref="T:NetworkTables.Exceptions.TableKeyNotDefinedException">Thrown if the key does
            not exist in the table</exception>
      <exception cref="T:NetworkTables.Exceptions.TableKeyDifferentTypeException">Thrown if the type
            requested does not match the type in the table</exception>
    </member>
    <member name="M:NetworkTables.Independent.IndependentNtCore.GetEntryStringArray(System.String,System.String[])">
      <summary>
            Gets an entry value
            </summary>
      <param name="name">The entry name</param>
      <param name="defaultValue">The default value if the key does not exist or is the wrong typel</param>
      <returns>The value requested, or defaultValue if the key does not exist or is the wrong type</returns>
    </member>
    <member name="M:NetworkTables.Independent.IndependentNtCore.GetEntryValue(System.String)">
      <summary>
            Returns a copy of the current entry value
            </summary>
      <param name="name">The entry name</param>
      <returns>The value in the table</returns>
    </member>
    <member name="M:NetworkTables.Independent.IndependentNtCore.GetType(System.String)">
      <summary>
            Gets the type of a specified entry
            </summary>
      <param name="name">The entry name</param>
      <returns>The type of the entry. <see cref="F:NetworkTables.NtType.Unassigned" /> if the entry does not exist</returns>
    </member>
    <member name="M:NetworkTables.Independent.IndependentNtCore.LoadPersistent(System.String)">
      <summary>
            Loads persistent variables from a specified file
            </summary>
      <param name="filename">The file to load from</param>
      <returns>An array of all errors reported during loading</returns>
    </member>
    <member name="M:NetworkTables.Independent.IndependentNtCore.LoadPersistent(System.String,System.Action{System.Int32,System.String})">
      <summary>
            Loads persistent variables from a specified file
            </summary>
      <param name="filename">The file to load from</param>
      <param name="warn">Function called whenever an error is seen during loading. Int is line number, string is message.</param>
      <returns>Error string, or null on success</returns>
    </member>
    <member name="M:NetworkTables.Independent.IndependentNtCore.NotifierDestroyed">
      <summary>
            Gets if the notifier thread for callbacks has been destroyed
            </summary>
      <returns>True if the notifier has been destroyed</returns>
    </member>
    <member name="M:NetworkTables.Independent.IndependentNtCore.Now">
      <summary>
            Gets the current timestamp of the library to be used for value time comparisons 
            </summary>
      <returns>The current time in milliseconds</returns>
    </member>
    <member name="P:NetworkTables.Independent.IndependentNtCore.RemoteName">
      <summary>
            Gets or sets the remote name for this table
            </summary>
    </member>
    <member name="M:NetworkTables.Independent.IndependentNtCore.RemoveConnectionListener(System.Int32)">
      <summary>
            Removes a connection listener from the table
            </summary>
      <param name="uid">The connection listener id</param>
    </member>
    <member name="M:NetworkTables.Independent.IndependentNtCore.RemoveEntryListener(System.Int32)">
      <summary>
            Removed an entry listener from the table
            </summary>
      <param name="uid">The entry listener id</param>
    </member>
    <member name="P:NetworkTables.Independent.IndependentNtCore.Running">
      <summary>
            Gets if this table is running
            </summary>
    </member>
    <member name="M:NetworkTables.Independent.IndependentNtCore.SavePersistent(System.String)">
      <summary>
            Saves all persistent variables to the files specified
            </summary>
      <param name="filename">The file to save to</param>
      <returns>Error string, or null on success</returns>
    </member>
    <member name="M:NetworkTables.Independent.IndependentNtCore.SetDefaultEntryBoolean(System.String,System.Boolean)">
      <summary>
            Sets an entry value in the table if it does not exist.
            </summary>
      <param name="name">The entry name</param>
      <param name="value">The value to set</param>
      <returns>False if the type does not match existing value</returns>
    </member>
    <member name="M:NetworkTables.Independent.IndependentNtCore.SetDefaultEntryBooleanArray(System.String,System.Collections.Generic.IList{System.Boolean})">
      <summary>
            Sets an entry value in the table if it does not exist.
            </summary>
      <param name="name">The entry name</param>
      <param name="value">The value to set</param>
      <returns>False if the type does not match existing value</returns>
    </member>
    <member name="M:NetworkTables.Independent.IndependentNtCore.SetDefaultEntryDouble(System.String,System.Double)">
      <summary>
            Sets an entry value in the table if it does not exist.
            </summary>
      <param name="name">The entry name</param>
      <param name="value">The value to set</param>
      <returns>False if the type does not match existing value</returns>
    </member>
    <member name="M:NetworkTables.Independent.IndependentNtCore.SetDefaultEntryDoubleArray(System.String,System.Collections.Generic.IList{System.Double})">
      <summary>
            Sets an entry value in the table if it does not exist.
            </summary>
      <param name="name">The entry name</param>
      <param name="value">The value to set</param>
      <returns>False if the type does not match existing value</returns>
    </member>
    <member name="M:NetworkTables.Independent.IndependentNtCore.SetDefaultEntryRaw(System.String,System.Collections.Generic.IList{System.Byte})">
      <summary>
            Sets an entry value in the table if it does not exist.
            </summary>
      <param name="name">The entry name</param>
      <param name="value">The value to set</param>
      <returns>False if the type does not match existing value</returns>
    </member>
    <member name="M:NetworkTables.Independent.IndependentNtCore.SetDefaultEntryString(System.String,System.String)">
      <summary>
            Sets an entry value in the table if it does not exist.
            </summary>
      <param name="name">The entry name</param>
      <param name="value">The value to set</param>
      <returns>False if the type does not match existing value</returns>
    </member>
    <member name="M:NetworkTables.Independent.IndependentNtCore.SetDefaultEntryStringArray(System.String,System.Collections.Generic.IList{System.String})">
      <summary>
            Sets an entry value in the table if it does not exist.
            </summary>
      <param name="name">The entry name</param>
      <param name="value">The value to set</param>
      <returns>False if the type does not match existing value</returns>
    </member>
    <member name="M:NetworkTables.Independent.IndependentNtCore.SetDefaultEntryValue(System.String,NetworkTables.Value)">
      <summary>
            Sets an entry value in the table if it does not exist.
            </summary>
      <param name="name">The entry name</param>
      <param name="value">The value to set</param>
      <returns>False if the type does not match existing value</returns>
    </member>
    <member name="M:NetworkTables.Independent.IndependentNtCore.SetEntryBoolean(System.String,System.Boolean,System.Boolean)">
      <summary>
            Sets an entry value
            </summary>
      <param name="name">The entry name</param>
      <param name="value">The value to set</param>
      <param name="force">True to force an update even if types are different</param>
      <returns>True on success, otherwise false</returns>
    </member>
    <member name="M:NetworkTables.Independent.IndependentNtCore.SetEntryBooleanArray(System.String,System.Collections.Generic.IList{System.Boolean},System.Boolean)">
      <summary>
            Sets an entry value
            </summary>
      <param name="name">The entry name</param>
      <param name="value">The value to set</param>
      <param name="force">True to force an update even if types are different</param>
      <returns>True on success, otherwise false</returns>
    </member>
    <member name="M:NetworkTables.Independent.IndependentNtCore.SetEntryDouble(System.String,System.Double,System.Boolean)">
      <summary>
            Sets an entry value
            </summary>
      <param name="name">The entry name</param>
      <param name="value">The value to set</param>
      <param name="force">True to force an update even if types are different</param>
      <returns>True on success, otherwise false</returns>
    </member>
    <member name="M:NetworkTables.Independent.IndependentNtCore.SetEntryDoubleArray(System.String,System.Collections.Generic.IList{System.Double},System.Boolean)">
      <summary>
            Sets an entry value
            </summary>
      <param name="name">The entry name</param>
      <param name="value">The value to set</param>
      <param name="force">True to force an update even if types are different</param>
      <returns>True on success, otherwise false</returns>
    </member>
    <member name="M:NetworkTables.Independent.IndependentNtCore.SetEntryFlags(System.String,NetworkTables.EntryFlags)">
      <summary>
            Sets flags associated with an entry
            </summary>
      <param name="name">The entry name</param>
      <param name="flags">The bitmask of the flags to set</param>
    </member>
    <member name="M:NetworkTables.Independent.IndependentNtCore.SetEntryRaw(System.String,System.Collections.Generic.IList{System.Byte},System.Boolean)">
      <summary>
            Sets an entry value
            </summary>
      <param name="name">The entry name</param>
      <param name="value">The value to set</param>
      <param name="force">True to force an update even if types are different</param>
      <returns>True on success, otherwise false</returns>
    </member>
    <member name="M:NetworkTables.Independent.IndependentNtCore.SetEntryString(System.String,System.String,System.Boolean)">
      <summary>
            Sets an entry value
            </summary>
      <param name="name">The entry name</param>
      <param name="value">The value to set</param>
      <param name="force">True to force an update even if types are different</param>
      <returns>True on success, otherwise false</returns>
    </member>
    <member name="M:NetworkTables.Independent.IndependentNtCore.SetEntryStringArray(System.String,System.Collections.Generic.IList{System.String},System.Boolean)">
      <summary>
            Sets an entry value
            </summary>
      <param name="name">The entry name</param>
      <param name="value">The value to set</param>
      <param name="force">True to force an update even if types are different</param>
      <returns>True on success, otherwise false</returns>
    </member>
    <member name="M:NetworkTables.Independent.IndependentNtCore.SetEntryTypeValue(System.String,NetworkTables.Value)">
      <summary>
            Sets a new entry value, forcing an update on a type mismatch
            </summary>
      <param name="name">The entry name</param>
      <param name="value">The value to set</param>
    </member>
    <member name="M:NetworkTables.Independent.IndependentNtCore.SetEntryValue(System.String,NetworkTables.Value)">
      <summary>
            Sets a new entry value
            </summary>
      <param name="name">The entry name</param>
      <param name="value">The value to set</param>
      <returns>True on successful set, false on error</returns>
    </member>
    <member name="M:NetworkTables.Independent.IndependentNtCore.SetLogger(NetworkTables.LogFunc,NetworkTables.LogLevel)">
      <summary>
            Sets the logger to be used when an error is encountered by NetworkTables
            </summary>
      <param name="func">The function to use to log</param>
      <param name="minLevel">The minimum level required to log</param>
    </member>
    <member name="M:NetworkTables.Independent.IndependentNtCore.StartClient(System.Collections.Generic.IList{NetworkTables.NtIPAddress})">
      <summary>
            Starts this table in client mode attempting to connect to multiple servers
            in round robin fashion
            </summary>
      <param name="servers">The servers to try and connect to</param>
    </member>
    <member name="M:NetworkTables.Independent.IndependentNtCore.StartClient(System.String,System.Int32)">
      <summary>
            Starts this table in client mode
            </summary>
      <param name="serverName">The server name</param>
      <param name="port">The server port</param>
    </member>
    <member name="M:NetworkTables.Independent.IndependentNtCore.StartServer(System.String,System.String,System.Int32)">
      <summary>
            Starts this table in server mode
            </summary>
      <param name="persistFilename">The filename to use for the persistent file</param>
      <param name="listenAddress">The specific ip address to listen on</param>
      <param name="port">The port to listen on</param>
    </member>
    <member name="M:NetworkTables.Independent.IndependentNtCore.StopClient">
      <summary>
            Stops the client if it is running
            </summary>
    </member>
    <member name="M:NetworkTables.Independent.IndependentNtCore.StopNotifier">
      <summary>
            Stops the notifier listener thread if it is running
            </summary>
    </member>
    <member name="M:NetworkTables.Independent.IndependentNtCore.StopRpcServer">
      <summary>
            Stops the Rpc server if it is running
            </summary>
    </member>
    <member name="M:NetworkTables.Independent.IndependentNtCore.StopServer">
      <summary>
            Stops the server if it is running
            </summary>
    </member>
    <member name="P:NetworkTables.Independent.IndependentNtCore.UpdateRate">
      <summary>
            Gets or sets the update rate for this table (seconds)
            </summary>
    </member>
    <member name="T:NetworkTables.Independent.IndependentRemoteProcedureCall">
      <summary>
            A RemoteProcedureCall class that can be run without the static NetworkTables implmentation
            </summary>
    </member>
    <member name="M:NetworkTables.Independent.IndependentRemoteProcedureCall.#ctor(NetworkTables.Independent.IndependentNtCore)">
      <summary>
            Creates a new <see cref="T:NetworkTables.Independent.IndependentNetworkTable" /> object from a <see cref="T:NetworkTables.Independent.IndependentNtCore" /> object
            </summary>
      <param name="ntCore">The <see cref="T:NetworkTables.Independent.IndependentNtCore" /> object to use</param>
    </member>
    <member name="M:NetworkTables.Independent.IndependentRemoteProcedureCall.CallRpc(System.String,System.Collections.Generic.IList{NetworkTables.Value})">
      <summary>
            Calls a procedure on a remote server
            </summary>
      <param name="name">The name of the Rpc</param>
      <param name="param">The data to send for the request</param>
      <returns>The Rpc call id</returns>
    </member>
    <member name="M:NetworkTables.Independent.IndependentRemoteProcedureCall.CallRpc(System.String,System.Collections.Generic.IList{System.Byte})">
      <summary>
            Calls a procedure on a remote server
            </summary>
      <param name="name">The name of the Rpc</param>
      <param name="param">The data to send for the request</param>
      <returns>The Rpc call id</returns>
    </member>
    <member name="M:NetworkTables.Independent.IndependentRemoteProcedureCall.CallRpcWithResultAsync(System.String,System.Threading.CancellationToken,System.Collections.Generic.IList{NetworkTables.Value})">
      <summary>
            Calls a procedure on a remote server, and awaits a response asynchronously
            </summary>
      <param name="name">The name of the Rpc</param>
      <param name="token">The token to cancel the response request</param>
      <param name="param">The data to send for the request</param>
      <returns>The results received from the server for the request</returns>
    </member>
    <member name="M:NetworkTables.Independent.IndependentRemoteProcedureCall.CallRpcWithResultAsync(System.String,System.Threading.CancellationToken,System.Collections.Generic.IList{System.Byte})">
      <summary>
            Calls a procedure on a remote server, and awaits a response asynchronously
            </summary>
      <param name="name">The name of the Rpc</param>
      <param name="token">The token to cancel the response request</param>
      <param name="param">The data to send for the request</param>
      <returns>The results received from the server for the request</returns>
    </member>
    <member name="M:NetworkTables.Independent.IndependentRemoteProcedureCall.CreatePolledRpc(System.String,NetworkTables.RpcDefinition)">
      <summary>
            Creates an procedure called by a remote client that can be polled by the server
            </summary>
      <param name="name">The name for this Rpc</param>
      <param name="def">The definition for this Rpc</param>
    </member>
    <member name="M:NetworkTables.Independent.IndependentRemoteProcedureCall.CreatePolledRpc(System.String,System.Collections.Generic.IList{System.Byte})">
      <summary>
            Creates an procedure called by a remote client that can be polled by the server
            </summary>
      <param name="name">The name for this Rpc</param>
      <param name="def">The definition for this Rpc</param>
    </member>
    <member name="M:NetworkTables.Independent.IndependentRemoteProcedureCall.CreateRpc(System.String,NetworkTables.RpcDefinition,NetworkTables.RpcCallback)">
      <summary>
            Creates an procedure that can be called by a remote client
            </summary>
      <param name="name">The name for this Rpc</param>
      <param name="def">The definition for this Rpc</param>
      <param name="callback">The callback to use the the procedure is called from a remote</param>
    </member>
    <member name="M:NetworkTables.Independent.IndependentRemoteProcedureCall.CreateRpc(System.String,System.Collections.Generic.IList{System.Byte},NetworkTables.RpcCallback)">
      <summary>
            Creates an procedure that can be called by a remote client
            </summary>
      <param name="name">The name for this Rpc</param>
      <param name="def">The definition for this Rpc</param>
      <param name="callback">The callback to use the the procedure is called from a remote</param>
    </member>
    <member name="M:NetworkTables.Independent.IndependentRemoteProcedureCall.GetRpcResult(System.Boolean,System.Int64,System.Byte[]@)">
      <summary>
            Gets the result of an Rpc request
            </summary>
      <param name="blocking">True if the call should block until the request is received</param>
      <param name="callUid">The Rpc call id</param>
      <param name="result">Array of results sent back from the server from the request</param>
      <returns>True if a result was received, otherwise false</returns>
    </member>
    <member name="M:NetworkTables.Independent.IndependentRemoteProcedureCall.GetRpcResult(System.Boolean,System.Int64,System.TimeSpan,System.Byte[]@)">
      <summary>
            Gets the result of an Rpc request
            </summary>
      <param name="blocking">True if the call should block until the request is received</param>
      <param name="callUid">The Rpc call id</param>
      <param name="timeout">Timeout to wait for if blocking</param>
      <param name="result">Array of results sent back from the server from the request</param>
      <returns>True if a result was received, otherwise false</returns>
    </member>
    <member name="M:NetworkTables.Independent.IndependentRemoteProcedureCall.GetRpcResultAsync(System.Int64,System.Threading.CancellationToken)">
      <summary>
            Gets the result of an Rpc request asynchronously
            </summary>
      <param name="callUid">The Rpc call id</param>
      <param name="token">Token to cancel the request on</param>
      <returns>Array of results sent back from the server from the request</returns>
    </member>
    <member name="M:NetworkTables.Independent.IndependentRemoteProcedureCall.PackRpcDefinition(NetworkTables.RpcDefinition)">
      <summary>
            Pack an Rpc defintion in to a byte array
            </summary>
      <param name="def">The definition to pack</param>
      <returns>The packed data</returns>
    </member>
    <member name="M:NetworkTables.Independent.IndependentRemoteProcedureCall.PackRpcValues(System.Collections.Generic.IList{NetworkTables.Value})">
      <summary>
            Pack a list of values
            </summary>
      <param name="values">The values to pack</param>
      <returns>The packed values</returns>
    </member>
    <member name="M:NetworkTables.Independent.IndependentRemoteProcedureCall.PollRpc(System.Boolean,NetworkTables.RpcCallInfo@)">
      <summary>
            Polls for an Rpc request from a client
            </summary>
      <param name="blocking">True to block waiting for a request</param>
      <param name="callInfo">The info for the call request</param>
      <returns>True if an Rpc call has been requested, otherwise false</returns>
    </member>
    <member name="M:NetworkTables.Independent.IndependentRemoteProcedureCall.PollRpc(System.Boolean,System.TimeSpan,NetworkTables.RpcCallInfo@)">
      <summary>
            Polls for an Rpc request from a client
            </summary>
      <param name="blocking">True to block waiting for a request</param>
      <param name="timeout">Timeout to wait for if blocking</param>
      <param name="callInfo">The info for the call request</param>
      <returns>True if an Rpc call has been requested, otherwise false</returns>
    </member>
    <member name="M:NetworkTables.Independent.IndependentRemoteProcedureCall.PollRpcAsync(System.Threading.CancellationToken)">
      <summary>
            Polls for an Rpc request from a client asynchronously
            </summary>
      <param name="token">Token to cancel the polling on</param>
      <returns>The info for the call request, or null if canceled.</returns>
    </member>
    <member name="M:NetworkTables.Independent.IndependentRemoteProcedureCall.PostRpcResponse(System.Int64,System.Int64,System.Collections.Generic.IList{System.Byte})">
      <summary>
            Posts an Rpc response to a polled Rpc request
            </summary>
      <param name="rpcId">The id of the rpc to respond to</param>
      <param name="callUid">The id of the request to respond to</param>
      <param name="result">The result to send as a response</param>
    </member>
    <member name="M:NetworkTables.Independent.IndependentRemoteProcedureCall.UnpackRpcDefinition(System.Collections.Generic.IList{System.Byte},NetworkTables.RpcDefinition@)">
      <summary>
            Unpack an Rpc definition from a byte array
            </summary>
      <param name="packed">The data array</param>
      <param name="def">The definition to unpack to</param>
      <returns>True if the data was unpacked successfully</returns>
    </member>
    <member name="M:NetworkTables.Independent.IndependentRemoteProcedureCall.UnpackRpcValues(System.Collections.Generic.IList{System.Byte},System.Collections.Generic.IList{NetworkTables.NtType})">
      <summary>
            Unpack a list of values
            </summary>
      <param name="packed">The packed data</param>
      <param name="types">The types the packed data should be</param>
      <returns>A list of the unpacked values</returns>
    </member>
    <member name="T:NetworkTables.Tables.IRemote">
      <summary>
            Represents an object that has a remote connection.
            </summary>
    </member>
    <member name="M:NetworkTables.Tables.IRemote.AddConnectionListener(NetworkTables.Tables.IRemoteConnectionListener,System.Boolean)">
      <summary>
            Register an object to listen for connection and disconnection events.
            </summary>
      <param name="listener">The listener to be registered</param>
      <param name="immediateNotify">True if the listener object should be notified of the current
            connection state immediately.</param>
    </member>
    <member name="M:NetworkTables.Tables.IRemote.AddConnectionListener(System.Action{NetworkTables.Tables.IRemote,NetworkTables.ConnectionInfo,System.Boolean},System.Boolean)">
      <summary>
            Register a delegate to listen for connection and disconnection events.
            </summary>
      <param name="listener">The listener to be registered.</param>
      <param name="immediateNotify">True if the listener object should be notified of the current
            connection state immediately.</param>
    </member>
    <member name="P:NetworkTables.Tables.IRemote.IsConnected">
      <summary>
            Gets if the current object is connected.
            </summary>
    </member>
    <member name="P:NetworkTables.Tables.IRemote.IsServer">
      <summary>
            Gets if the object is a server.
            </summary>
    </member>
    <member name="M:NetworkTables.Tables.IRemote.RemoveConnectionListener(NetworkTables.Tables.IRemoteConnectionListener)">
      <summary>
            Unregister a listener from connection events.
            </summary>
      <param name="listener">The listener to be unregistered.</param>
    </member>
    <member name="M:NetworkTables.Tables.IRemote.RemoveConnectionListener(System.Action{NetworkTables.Tables.IRemote,NetworkTables.ConnectionInfo,System.Boolean})">
      <summary>
            Unregister a listener delegate from connection events.
            </summary>
      <param name="listener">The listener to be unregistered.</param>
    </member>
    <member name="T:NetworkTables.Tables.IRemoteConnectionListener">
      <summary>
            A listener that listens for connection changes in an <see cref="T:NetworkTables.Tables.IRemote" /> object.
            </summary>
    </member>
    <member name="M:NetworkTables.Tables.IRemoteConnectionListener.Connected(NetworkTables.Tables.IRemote,NetworkTables.ConnectionInfo)">
      <summary>
            Called when an <see cref="T:NetworkTables.Tables.IRemote" /> is connected
            </summary>
      <param name="remote">The object that connected.</param>
      <param name="info">An object containing information about the 
            connected remote.</param>
    </member>
    <member name="M:NetworkTables.Tables.IRemoteConnectionListener.Disconnected(NetworkTables.Tables.IRemote,NetworkTables.ConnectionInfo)">
      <summary>
            Called when an <see cref="T:NetworkTables.Tables.IRemote" /> is disconnected.
            </summary>
      <param name="remote">The object that disconnected.</param>
      <param name="info">An object containing information about the
            disconnected remote.</param>
    </member>
    <member name="T:NetworkTables.Tables.ITable">
      <summary>
            A table whose values can be read from and written to.
            </summary>
    </member>
    <member name="M:NetworkTables.Tables.ITable.AddSubTableListener(NetworkTables.Tables.ITableListener)">
      <summary>
            Adds a SubTable Listener with the default flags, and without local notify.
            </summary>
      <param name="listener">The <see cref="T:NetworkTables.Tables.ITableListener" /> to add.</param>
    </member>
    <member name="M:NetworkTables.Tables.ITable.AddSubTableListener(NetworkTables.Tables.ITableListener,System.Boolean)">
      <summary>
            Adds a SubTable Listener.
            </summary>
      <param name="listener">The <see cref="T:NetworkTables.Tables.ITableListener" /> to add.</param>
      <param name="localNotify">True if we want to notify local and remote listeners,
            otherwise just notify remote listeners.</param>
    </member>
    <member name="M:NetworkTables.Tables.ITable.AddSubTableListener(System.Action{NetworkTables.Tables.ITable,System.String,NetworkTables.Value,NetworkTables.NotifyFlags})">
      <summary>
            Adds a SubTable Listener with the default flags, and without local notify.
            </summary>
      <param name="listenerDelegate">The Table Listener Delegate to add.</param>
    </member>
    <member name="M:NetworkTables.Tables.ITable.AddSubTableListener(System.Action{NetworkTables.Tables.ITable,System.String,NetworkTables.Value,NetworkTables.NotifyFlags},System.Boolean)">
      <summary>
            Adds a SubTable Listener.
            </summary>
      <param name="listenerDelegate">The Table Listener Delegate to add.</param>
      <param name="localNotify">True if we want to notify local and remote listeners,
            otherwise just notify remote listeners.</param>
    </member>
    <member name="M:NetworkTables.Tables.ITable.AddTableListener(NetworkTables.Tables.ITableListener,System.Boolean)">
      <summary>
            Add a listener to changes to the table.
            </summary>
      <param name="listener">The listener to add</param>
      <param name="immediateNotify">If true then this listener will be notified of all current entries (marked as new)</param>
    </member>
    <member name="M:NetworkTables.Tables.ITable.AddTableListener(System.Action{NetworkTables.Tables.ITable,System.String,NetworkTables.Value,NetworkTables.NotifyFlags},System.Boolean)">
      <summary>
            Add a listener to changes to the table.
            </summary>
      <param name="listenerDelegate">The Table Listener Delegate to add.</param>
      <param name="immediateNotify">If true then this listener will be notified of all current entries (marked as new)</param>
    </member>
    <member name="M:NetworkTables.Tables.ITable.AddTableListener(System.String,NetworkTables.Tables.ITableListener,System.Boolean)">
      <summary>
            Add a listener for changes to a specific key in the table.
            </summary>
      <param name="key">The key to listen for</param>
      <param name="listener">The listener to add</param>
      <param name="immediateNotify">If true then this listener will be notified of all current entries (marked as new)</param>
    </member>
    <member name="M:NetworkTables.Tables.ITable.AddTableListener(System.String,System.Action{NetworkTables.Tables.ITable,System.String,NetworkTables.Value,NetworkTables.NotifyFlags},System.Boolean)">
      <summary>
            Add a listener for changes to a specific key in the table.
            </summary>
      <param name="key">The key to listen for</param>
      <param name="listenerDelegate">The Table Listener Delegate to add.</param>
      <param name="immediateNotify">If true then this listener will be notified of all current entries (marked as new)</param>
    </member>
    <member name="M:NetworkTables.Tables.ITable.AddTableListenerEx(NetworkTables.Tables.ITableListener,NetworkTables.NotifyFlags)">
      <summary>
            Add a listener to changes to the table.
            </summary>
      <param name="listener">The listener to add</param>
      <param name="flags">The <see cref="T:NetworkTables.EntryFlags" /> flags to use for the listener</param>
    </member>
    <member name="M:NetworkTables.Tables.ITable.AddTableListenerEx(System.Action{NetworkTables.Tables.ITable,System.String,NetworkTables.Value,NetworkTables.NotifyFlags},NetworkTables.NotifyFlags)">
      <summary>
            Add a listener to changes to the table.
            </summary>
      <param name="listenerDelegate">The Table Listener Delegate to add.</param>
      <param name="flags">The <see cref="T:NetworkTables.EntryFlags" /> flags to use for the listener</param>
    </member>
    <member name="M:NetworkTables.Tables.ITable.AddTableListenerEx(System.String,NetworkTables.Tables.ITableListener,NetworkTables.NotifyFlags)">
      <summary>
            Add a listener for changes to a specific key in the table.
            </summary>
      <param name="key">The key to listen for</param>
      <param name="listener">The listener to add</param>
      <param name="flags">The <see cref="T:NetworkTables.EntryFlags" /> flags to use for the listener</param>
    </member>
    <member name="M:NetworkTables.Tables.ITable.AddTableListenerEx(System.String,System.Action{NetworkTables.Tables.ITable,System.String,NetworkTables.Value,NetworkTables.NotifyFlags},NetworkTables.NotifyFlags)">
      <summary>
            Add a listener for changes to a specific key in the table.
            </summary>
      <param name="key">The key to listen for</param>
      <param name="listenerDelegate">The Table Listener Delegate to add.</param>
      <param name="flags">The <see cref="T:NetworkTables.EntryFlags" /> flags to use for the listener</param>
    </member>
    <member name="M:NetworkTables.Tables.ITable.ClearFlags(System.String,NetworkTables.EntryFlags)">
      <summary>
            Clears flags on the specified key in this table.
            </summary>
      <param name="key">The key name.</param>
      <param name="flags">The flags to clear. (Bitmask)</param>
    </member>
    <member name="M:NetworkTables.Tables.ITable.ClearPersistent(System.String)">
      <summary>
            Stop making a key's value persistent through program restarts.
            </summary>
      <param name="key">The key name (cannot be null).</param>
    </member>
    <member name="M:NetworkTables.Tables.ITable.ContainsKey(System.String)">
      <summary>
            Determines whether the given key is in this table.
            </summary>
      <param name="key">The key to search for</param>
      <returns>If the table has a value assignend to the given key</returns>
    </member>
    <member name="M:NetworkTables.Tables.ITable.ContainsSubTable(System.String)">
      <summary>
            Determines whether there exists a non-empty subtable for this key in this table.
            </summary>
      <param name="key">The key to search for</param>
      <returns>If there is a subtable with the key which contains at least one key/subtable of its own</returns>
    </member>
    <member name="M:NetworkTables.Tables.ITable.Delete(System.String)">
      <summary>
            Deletes the specifed key in this table.
            </summary>
      <param name="key">The key name.</param>
    </member>
    <member name="M:NetworkTables.Tables.ITable.GetBoolean(System.String)">
      <summary>
            Returns the value that the key maps to.
            </summary>
      <param name="key">The key name.</param>
      <returns>The requested value.</returns>
      <exception cref="T:NetworkTables.Exceptions.TableKeyNotDefinedException">Thrown if the key does not 
            exist in the table, or if the key is null.</exception>
      <exception cref="T:NetworkTables.Exceptions.TableKeyDifferentTypeException">Thrown if the key exists
            as a different type in the table.</exception>
    </member>
    <member name="M:NetworkTables.Tables.ITable.GetBoolean(System.String,System.Boolean)">
      <summary>
            Returns the value that the key maps to.
            </summary>
      <param name="key">The key name.</param>
      <param name="defaultValue">The default value if the key does not exist or is null</param>
      <returns>The value requested, or defaultValue if the key does not exist or is null.</returns>
    </member>
    <member name="M:NetworkTables.Tables.ITable.GetBooleanArray(System.String)">
      <summary>
            Returns the value array that the key maps to.
            </summary>
      <param name="key">The key name.</param>
      <returns>The requested value array.</returns>
      <exception cref="T:NetworkTables.Exceptions.TableKeyNotDefinedException">Thrown if the key does not 
            exist in the table, or if the key is null.</exception>
      <exception cref="T:NetworkTables.Exceptions.TableKeyDifferentTypeException">Thrown if the key exists
            as a different type in the table.</exception>
    </member>
    <member name="M:NetworkTables.Tables.ITable.GetBooleanArray(System.String,System.Boolean[])">
      <summary>
            Returns the value array that the key maps to.
            </summary>
      <param name="key">The key name.</param>
      <param name="defaultValue">The default value if the key does not exist or is null</param>
      <returns>The value array requested, or defaultValue if the key does not exist or is null.</returns>
    </member>
    <member name="M:NetworkTables.Tables.ITable.GetFlags(System.String)">
      <summary>
            Returns the flags for the specified key.
            </summary>
      <param name="key">The key name.</param>
      <returns>The flags attached to the key.</returns>
    </member>
    <member name="M:NetworkTables.Tables.ITable.GetKeys">
      <summary>
            Gets all keys currently in the table.
            </summary>
      <returns>A set of all keys in the table.</returns>
    </member>
    <member name="M:NetworkTables.Tables.ITable.GetKeys(NetworkTables.NtType)">
      <summary>
            Gets the keys currently in the table with the specified flags
            </summary>
      <param name="types">The bitmask of flags to check for.</param>
      <returns>A set of the keys currently in the table with the specified flags.</returns>
    </member>
    <member name="M:NetworkTables.Tables.ITable.GetNumber(System.String)">
      <summary>
            Returns the value that the key maps to.
            </summary>
      <param name="key">The key name.</param>
      <returns>The requested value.</returns>
      <exception cref="T:NetworkTables.Exceptions.TableKeyNotDefinedException">Thrown if the key does not 
            exist in the table, or if the key is null.</exception>
      <exception cref="T:NetworkTables.Exceptions.TableKeyDifferentTypeException">Thrown if the key exists
            as a different type in the table.</exception>
    </member>
    <member name="M:NetworkTables.Tables.ITable.GetNumber(System.String,System.Double)">
      <summary>
            Returns the value that the key maps to.
            </summary>
      <param name="key">The key name.</param>
      <param name="defaultValue">The default value if the key does not exist or is null</param>
      <returns>The value requested, or defaultValue if the key does not exist or is null.</returns>
    </member>
    <member name="M:NetworkTables.Tables.ITable.GetNumberArray(System.String)">
      <summary>
            Returns the value array that the key maps to.
            </summary>
      <param name="key">The key name.</param>
      <returns>The requested value array.</returns>
      <exception cref="T:NetworkTables.Exceptions.TableKeyNotDefinedException">Thrown if the key does not 
            exist in the table, or if the key is null.</exception>
      <exception cref="T:NetworkTables.Exceptions.TableKeyDifferentTypeException">Thrown if the key exists
            as a different type in the table.</exception>
    </member>
    <member name="M:NetworkTables.Tables.ITable.GetNumberArray(System.String,System.Double[])">
      <summary>
            Returns the value array that the key maps to.
            </summary>
      <param name="key">The key name.</param>
      <param name="defaultValue">The default value if the key does not exist or is null</param>
      <returns>The value array requested, or defaultValue if the key does not exist or is null.</returns>
    </member>
    <member name="M:NetworkTables.Tables.ITable.GetRaw(System.String)">
      <summary>
            Returns the value array that the key maps to.
            </summary>
      <param name="key">The key name.</param>
      <returns>The requested value array.</returns>
      <exception cref="T:NetworkTables.Exceptions.TableKeyNotDefinedException">Thrown if the key does not 
            exist in the table, or if the key is null.</exception>
      <exception cref="T:NetworkTables.Exceptions.TableKeyDifferentTypeException">Thrown if the key exists
            as a different type in the table.</exception>
    </member>
    <member name="M:NetworkTables.Tables.ITable.GetRaw(System.String,System.Byte[])">
      <summary>
            Returns the value array that the key maps to.
            </summary>
      <param name="key">The key name.</param>
      <param name="defaultValue">The default value if the key does not exist or is null</param>
      <returns>The value array requested, or defaultValue if the key does not exist or is null.</returns>
    </member>
    <member name="M:NetworkTables.Tables.ITable.GetString(System.String)">
      <summary>
            Returns the value that the key maps to.
            </summary>
      <param name="key">The key name.</param>
      <returns>The requested value.</returns>
      <exception cref="T:NetworkTables.Exceptions.TableKeyNotDefinedException">Thrown if the key does not 
            exist in the table, or if the key is null.</exception>
      <exception cref="T:NetworkTables.Exceptions.TableKeyDifferentTypeException">Thrown if the key exists
            as a different type in the table.</exception>
    </member>
    <member name="M:NetworkTables.Tables.ITable.GetString(System.String,System.String)">
      <summary>
            Returns the value that the key maps to.
            </summary>
      <param name="key">The key name.</param>
      <param name="defaultValue">The default value if the key does not exist or is null</param>
      <returns>The value requested, or defaultValue if the key does not exist or is null.</returns>
    </member>
    <member name="M:NetworkTables.Tables.ITable.GetStringArray(System.String)">
      <summary>
            Returns the value array that the key maps to.
            </summary>
      <param name="key">The key name.</param>
      <returns>The requested value array.</returns>
      <exception cref="T:NetworkTables.Exceptions.TableKeyNotDefinedException">Thrown if the key does not 
            exist in the table, or if the key is null.</exception>
      <exception cref="T:NetworkTables.Exceptions.TableKeyDifferentTypeException">Thrown if the key exists
            as a different type in the table.</exception>
    </member>
    <member name="M:NetworkTables.Tables.ITable.GetStringArray(System.String,System.String[])">
      <summary>
            Returns the value array that the key maps to.
            </summary>
      <param name="key">The key name.</param>
      <param name="defaultValue">The default value if the key does not exist or is null</param>
      <returns>The value array requested, or defaultValue if the key does not exist or is null.</returns>
    </member>
    <member name="M:NetworkTables.Tables.ITable.GetSubTable(System.String)">
      <summary>
            Gets the subtable in this table for the given name.
            </summary>
      <param name="key">The name of the table relative to this one.</param>
      <returns>A sub table relative to this one</returns>
    </member>
    <member name="M:NetworkTables.Tables.ITable.GetSubTables">
      <summary>
            Gets all sub-tables currently in the table.
            </summary>
      <returns>A set of all sub-tables in the table.</returns>
    </member>
    <member name="M:NetworkTables.Tables.ITable.GetValue(System.String)">
      <summary>
            Returns the value that the key maps to.
            </summary>
      <param name="key">The key name.</param>
      <returns>The requested value.</returns>
      <exception cref="T:NetworkTables.Exceptions.TableKeyNotDefinedException">Thrown if the key does not 
            exist in the table, or if the key is null.</exception>
      <exception cref="T:NetworkTables.Exceptions.TableKeyDifferentTypeException">Thrown if the key exists
            as a different type in the table.</exception>
    </member>
    <member name="M:NetworkTables.Tables.ITable.GetValue(System.String,NetworkTables.Value)">
      <summary>
            Returns the value that the key maps to.
            </summary>
      <param name="key">The key name.</param>
      <param name="defaultValue">The default value if the key does not exist or is null</param>
      <returns>The value requested, or defaultValue if the key does not exist or is null.</returns>
    </member>
    <member name="M:NetworkTables.Tables.ITable.IsPersistent(System.String)">
      <summary>
            Returns whether a value is persistent through program restarts.
            </summary>
      <param name="key">The key name (cannot be null).</param>
      <returns>True if the value is persistent.</returns>
    </member>
    <member name="M:NetworkTables.Tables.ITable.PutBoolean(System.String,System.Boolean)">
      <summary>
            Maps the specified key to the specified value in the table. 
            </summary>
      <param name="key">The key to map the value to.</param>
      <param name="value">The value to set.</param>
      <returns>True if the key was set properly, otherwise false</returns>
    </member>
    <member name="M:NetworkTables.Tables.ITable.PutBooleanArray(System.String,System.Collections.Generic.IList{System.Boolean})">
      <summary>
            Maps the specified key to the specified array of values in the table. 
            </summary>
      <param name="key">The key to map the value to.</param>
      <param name="value">The value to set.</param>
      <returns>True if the key was set properly, otherwise false</returns>
    </member>
    <member name="M:NetworkTables.Tables.ITable.PutNumber(System.String,System.Double)">
      <summary>
            Maps the specified key to the specified value in the table. 
            </summary>
      <param name="key">The key to map the value to.</param>
      <param name="value">The value to set.</param>
      <returns>True if the key was set properly, otherwise false</returns>
    </member>
    <member name="M:NetworkTables.Tables.ITable.PutNumberArray(System.String,System.Collections.Generic.IList{System.Double})">
      <summary>
            Maps the specified key to the specified array of values in the table. 
            </summary>
      <param name="key">The key to map the value to.</param>
      <param name="value">The value to set.</param>
      <returns>True if the key was set properly, otherwise false</returns>
    </member>
    <member name="M:NetworkTables.Tables.ITable.PutRaw(System.String,System.Collections.Generic.IList{System.Byte})">
      <summary>
            Put a raw value (byte array) in the table.
            </summary>
      <param name="key">The key to be assigned to.</param>
      <param name="value">The value that will be assigned.</param>
      <returns>False if the table key already exists with a different type.</returns>
    </member>
    <member name="M:NetworkTables.Tables.ITable.PutString(System.String,System.String)">
      <summary>
            Maps the specified key to the specified value in the table. 
            </summary>
      <param name="key">The key to map the value to.</param>
      <param name="value">The value to set.</param>
      <returns>True if the key was set properly, otherwise false</returns>
    </member>
    <member name="M:NetworkTables.Tables.ITable.PutStringArray(System.String,System.Collections.Generic.IList{System.String})">
      <summary>
            Maps the specified key to the specified array of values in the table. 
            </summary>
      <param name="key">The key to map the value to.</param>
      <param name="value">The value to set.</param>
      <returns>True if the key was set properly, otherwise false</returns>
    </member>
    <member name="M:NetworkTables.Tables.ITable.PutValue(System.String,NetworkTables.Value)">
      <summary>
            Maps the specified key to the specified value in the table. 
            </summary>
      <param name="key">The key to map the value to.</param>
      <param name="value">The value to set.</param>
      <returns>True if the key was set properly, otherwise false</returns>
      <exception cref="T:System.ArgumentException">Thrown if the value is not a type supported
            by the table.</exception>
    </member>
    <member name="M:NetworkTables.Tables.ITable.RemoveTableListener(NetworkTables.Tables.ITableListener)">
      <summary>
            Remove a listener from receiving table events.
            </summary>
      <param name="listener">The listener to be removed.</param>
    </member>
    <member name="M:NetworkTables.Tables.ITable.RemoveTableListener(System.Action{NetworkTables.Tables.ITable,System.String,NetworkTables.Value,NetworkTables.NotifyFlags})">
      <summary>
            Remove a listener from receiving table events.
            </summary>
      <param name="listenerDelegate">The Table Listener Delegate to remove.</param>
    </member>
    <member name="M:NetworkTables.Tables.ITable.SetDefaultBoolean(System.String,System.Boolean)">
      <summary>
            Sets the value in the table at the specified key if it does not exist.
            </summary>
      <param name="key">The key to set</param>
      <param name="defaultValue">The value to set if the key does not exits</param>
      <returns>False if the key exists with a different type, otherwise true</returns>
    </member>
    <member name="M:NetworkTables.Tables.ITable.SetDefaultBooleanArray(System.String,System.Collections.Generic.IList{System.Boolean})">
      <summary>
            Sets the value in the table at the specified key if it does not exist.
            </summary>
      <param name="key">The key to set</param>
      <param name="defaultValue">The value to set if the key does not exits</param>
      <returns>False if the key exists with a different type, otherwise true</returns>
    </member>
    <member name="M:NetworkTables.Tables.ITable.SetDefaultNumber(System.String,System.Double)">
      <summary>
            Sets the value in the table at the specified key if it does not exist.
            </summary>
      <param name="key">The key to set</param>
      <param name="defaultValue">The value to set if the key does not exits</param>
      <returns>False if the key exists with a different type, otherwise true</returns>
    </member>
    <member name="M:NetworkTables.Tables.ITable.SetDefaultNumberArray(System.String,System.Collections.Generic.IList{System.Double})">
      <summary>
            Sets the value in the table at the specified key if it does not exist.
            </summary>
      <param name="key">The key to set</param>
      <param name="defaultValue">The value to set if the key does not exits</param>
      <returns>False if the key exists with a different type, otherwise true</returns>
    </member>
    <member name="M:NetworkTables.Tables.ITable.SetDefaultRaw(System.String,System.Collections.Generic.IList{System.Byte})">
      <summary>
            Sets the value in the table at the specified key if it does not exist.
            </summary>
      <param name="key">The key to set</param>
      <param name="defaultValue">The value to set if the key does not exits</param>
      <returns>False if the key exists with a different type, otherwise true</returns>
    </member>
    <member name="M:NetworkTables.Tables.ITable.SetDefaultString(System.String,System.String)">
      <summary>
            Sets the value in the table at the specified key if it does not exist.
            </summary>
      <param name="key">The key to set</param>
      <param name="defaultValue">The value to set if the key does not exits</param>
      <returns>False if the key exists with a different type, otherwise true</returns>
    </member>
    <member name="M:NetworkTables.Tables.ITable.SetDefaultStringArray(System.String,System.Collections.Generic.IList{System.String})">
      <summary>
            Sets the value in the table at the specified key if it does not exist.
            </summary>
      <param name="key">The key to set</param>
      <param name="defaultValue">The value to set if the key does not exits</param>
      <returns>False if the key exists with a different type, otherwise true</returns>
    </member>
    <member name="M:NetworkTables.Tables.ITable.SetDefaultValue(System.String,NetworkTables.Value)">
      <summary>
            Sets the value in the table at the specified key if it does not exist.
            </summary>
      <param name="key">The key to set</param>
      <param name="defaultValue">The value to set if the key does not exits</param>
      <returns>False if the key exists with a different type, otherwise true</returns>
    </member>
    <member name="M:NetworkTables.Tables.ITable.SetFlags(System.String,NetworkTables.EntryFlags)">
      <summary>
            Sets flags on the specified key in this table.
            </summary>
      <param name="key">The key name.</param>
      <param name="flags">The flags to set. (Bitmask)</param>
    </member>
    <member name="M:NetworkTables.Tables.ITable.SetPersistent(System.String)">
      <summary>
            Makes a key's value persistent through program restarts.
            </summary>
      <param name="key">The key name (cannot be null).</param>
    </member>
    <member name="T:NetworkTables.Tables.ITableListener">
      <summary>
            A listener that listens to changes in values in an <see cref="T:NetworkTables.Tables.ITable" /></summary>
    </member>
    <member name="M:NetworkTables.Tables.ITableListener.ValueChanged(NetworkTables.Tables.ITable,System.String,NetworkTables.Value,NetworkTables.NotifyFlags)">
      <summary>
            Called when a key-value pair is changed in an <see cref="T:NetworkTables.Tables.ITable" />.
            </summary>
      <param name="source">The table the key-value pair exist in.</param>
      <param name="key">The key associated with the value that changed.</param>
      <param name="value">The new value.</param>
      <param name="flags">The update flags.</param>
    </member>
    <member name="T:NetworkTables.Wire.WireDecoder">
      <summary>
            Utility class that can be used to read values from a byte array
            </summary>
    </member>
    <member name="M:NetworkTables.Wire.WireDecoder.#ctor(System.Collections.Generic.IList{System.Byte},System.Int32)">
      <summary>
            Creates a new <see cref="T:NetworkTables.Wire.WireDecoder" /> using a list of bytes
            </summary>
      <param name="data">The data to decode</param>
      <param name="protoRev">The protocol revision for the decoder</param>
    </member>
    <member name="M:NetworkTables.Wire.WireDecoder.#ctor(System.IO.Stream,System.Int32)">
      <summary>
            Creates a new <see cref="T:NetworkTables.Wire.WireDecoder" /></summary>
      <param name="istream">The <see cref="T:System.IO.Stream">Input Stream</see> to read from</param>
      <param name="protoRev">The protocol revision for the decoder</param>
    </member>
    <member name="P:NetworkTables.Wire.WireDecoder.Error">
      <summary>
            Gets the error currently set by the decoder
            </summary>
    </member>
    <member name="M:NetworkTables.Wire.WireDecoder.HasMoreBytes(System.Int32)">
      <summary>
            Checks to see if a specific number of bytes exists in the buffer
            </summary>
      <param name="numBytesToCheck">The number of bytes to check</param>
      <returns>True if the number of requested bytes exists in the array</returns>
    </member>
    <member name="P:NetworkTables.Wire.WireDecoder.ProtoRev">
      <summary>
            Gets or sets the protocol revision of NetworkTables
            </summary>
    </member>
    <member name="M:NetworkTables.Wire.WireDecoder.Read(System.Byte[]@,System.Int32)">
      <summary>
            Reads a specific number of bytes from the buffer
            </summary>
      <param name="buf">The buffer to output to.</param>
      <param name="len">The length of data to read</param>
      <returns>True if the bytes were read, otherwise false</returns>
    </member>
    <member name="M:NetworkTables.Wire.WireDecoder.Read16(System.UInt16@)">
      <summary>
            Reads a ushort from the buffer
            </summary>
      <param name="val">The ushort read</param>
      <returns>True if the ushort was read</returns>
    </member>
    <member name="M:NetworkTables.Wire.WireDecoder.Read32(System.UInt32@)">
      <summary>
            Reads a uint from the buffer
            </summary>
      <param name="val">The uint read</param>
      <returns>True if the uint was read</returns>
    </member>
    <member name="M:NetworkTables.Wire.WireDecoder.Read8(System.Byte@)">
      <summary>
            Reads a byte from the buffer
            </summary>
      <param name="val">The byte read</param>
      <returns>True if the byte was read</returns>
    </member>
    <member name="M:NetworkTables.Wire.WireDecoder.ReadDouble(System.Double@)">
      <summary>
            Reads a double from the buffer
            </summary>
      <param name="val">The double read</param>
      <returns>True if the double was read</returns>
    </member>
    <member name="M:NetworkTables.Wire.WireDecoder.ReadRaw(System.Byte[]@)">
      <summary>
            Reads a raw byte array from the buffer
            </summary>
      <param name="val">The raw array read</param>
      <returns>True if the raw array was read</returns>
    </member>
    <member name="M:NetworkTables.Wire.WireDecoder.ReadString(System.String@)">
      <summary>
            Reads a string from the buffer
            </summary>
      <param name="val">The string read</param>
      <returns>True if the string was read</returns>
    </member>
    <member name="M:NetworkTables.Wire.WireDecoder.ReadType(NetworkTables.NtType@)">
      <summary>
            Read the next <see cref="T:NetworkTables.NtType" /> that is waiting in the buffer
            </summary>
      <param name="type">The <see cref="T:NetworkTables.NtType" /> that is next in the buffer</param>
      <returns>True if the type was read, else false</returns>
    </member>
    <member name="M:NetworkTables.Wire.WireDecoder.ReadUleb128(System.UInt64@)">
      <summary>
            Read a Uleb128 length from the buffer.
            </summary>
      <param name="val">The length read</param>
      <returns>True if the length was read</returns>
    </member>
    <member name="M:NetworkTables.Wire.WireDecoder.ReadValue(NetworkTables.NtType)">
      <summary>
            Read the next <see cref="T:NetworkTables.Value" /> that is waiting in the buffer
            </summary>
      <param name="type">The <see cref="T:NetworkTables.NtType" /> the <see cref="T:NetworkTables.Value" /> should be</param>
      <returns>True if the value was read, otherwise false</returns>
    </member>
    <member name="M:NetworkTables.Wire.WireDecoder.Reset">
      <summary>
            Resets the wire decoder
            </summary>
    </member>
    <member name="T:NetworkTables.Wire.WireEncoder">
      <summary>
            Utility class that can write values to be sent over a byte array
            </summary>
    </member>
    <member name="M:NetworkTables.Wire.WireEncoder.#ctor(System.Int32)">
      <summary>
            Creates a new <see cref="T:NetworkTables.Wire.WireEncoder" /></summary>
      <param name="protoRev">The protocol vision for the encoder</param>
    </member>
    <member name="P:NetworkTables.Wire.WireEncoder.Buffer">
      <summary>
            Gets the current buffer of data
            </summary>
    </member>
    <member name="P:NetworkTables.Wire.WireEncoder.Count">
      <summary>
            Gets the size 
            </summary>
    </member>
    <member name="P:NetworkTables.Wire.WireEncoder.Error">
      <summary>
            Gets the error currently set by the encoder
            </summary>
    </member>
    <member name="M:NetworkTables.Wire.WireEncoder.GetRawSize(System.Byte[])">
      <summary>
            Gets the size of a raw array if it was to be written to the encoder
            </summary>
      <param name="raw">The raw array to check the size of</param>
      <returns>The size the raw array would take on the encoder</returns>
    </member>
    <member name="M:NetworkTables.Wire.WireEncoder.GetStringSize(System.String)">
      <summary>
            Gets the size of a string if it was to be written to the encoder
            </summary>
      <param name="str">The string to check the size of</param>
      <returns>The size the string would take on the encoder</returns>
    </member>
    <member name="M:NetworkTables.Wire.WireEncoder.GetValueSize(NetworkTables.Value)">
      <summary>
            Gets the size of a value if it was to be written to the encoder
            </summary>
      <param name="value">The <see cref="T:NetworkTables.Value" /> to check the size of</param>
      <returns>The size the <see cref="T:NetworkTables.Value" /> would take on the encoder</returns>
    </member>
    <member name="P:NetworkTables.Wire.WireEncoder.ProtoRev">
      <summary>
            Gets or sets the protocol revision of NetworkTables
            </summary>
    </member>
    <member name="M:NetworkTables.Wire.WireEncoder.Reset">
      <summary>
            Resets the encoder
            </summary>
    </member>
    <member name="M:NetworkTables.Wire.WireEncoder.Write16(System.UInt16)">
      <summary>
            Writes a ushort to the encoder
            </summary>
      <param name="val">The ushort to write to the encoder</param>
    </member>
    <member name="M:NetworkTables.Wire.WireEncoder.Write32(System.UInt32)">
      <summary>
            Writes a uint to the encoder
            </summary>
      <param name="val">The uint to write to the encoder</param>
    </member>
    <member name="M:NetworkTables.Wire.WireEncoder.Write8(System.Byte)">
      <summary>
            Writes a byte to the encoder
            </summary>
      <param name="val">The byte to write</param>
    </member>
    <member name="M:NetworkTables.Wire.WireEncoder.WriteDouble(System.Double)">
      <summary>
            Writes a double to the buffer
            </summary>
      <param name="val">The value to write</param>
    </member>
    <member name="M:NetworkTables.Wire.WireEncoder.WriteRaw(System.Byte[])">
      <summary>
            Writes a raw array to the encoder
            </summary>
      <param name="raw">The raw array to write</param>
    </member>
    <member name="M:NetworkTables.Wire.WireEncoder.WriteString(System.String)">
      <summary>
            Write a string to the encoder
            </summary>
      <param name="str">The string to write</param>
    </member>
    <member name="M:NetworkTables.Wire.WireEncoder.WriteType(NetworkTables.NtType)">
      <summary>
            Writes a <see cref="T:NetworkTables.NtType" /> to the encoder
            </summary>
      <param name="type">The <see cref="T:NetworkTables.NtType" /> to write</param>
    </member>
    <member name="M:NetworkTables.Wire.WireEncoder.WriteUleb128(System.UInt64)">
      <summary>
            Write a Uleb128 length to the encoder
            </summary>
      <param name="val">The Uleb128 length to write</param>
    </member>
    <member name="M:NetworkTables.Wire.WireEncoder.WriteValue(NetworkTables.Value)">
      <summary>
            Writes a <see cref="T:NetworkTables.Value" /> to the encoder
            </summary>
      <param name="value">The <see cref="T:NetworkTables.Value" /> to write</param>
    </member>
  </members>
</doc>